// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type APIStepInitParameters struct {

	// (Boolean) Determines whether or not to continue with test if this step fails.
	// Determines whether or not to continue with test if this step fails.
	AllowFailure *bool `json:"allowFailure,omitempty" tf:"allow_failure,omitempty"`

	// (Block List) Assertions used for the test. Multiple assertion blocks are allowed with the structure below. (see below for nested schema)
	// Assertions used for the test. Multiple `assertion` blocks are allowed with the structure below.
	Assertion []AssertionInitParameters `json:"assertion,omitempty" tf:"assertion,omitempty"`

	// (Block List) Values to parse and save as variables from the response. (see below for nested schema)
	// Values to parse and save as variables from the response.
	ExtractedValue []ExtractedValueInitParameters `json:"extractedValue,omitempty" tf:"extracted_value,omitempty"`

	// (Boolean) Determines whether or not to consider the entire test as failed if this step fails. Can be used only if allow_failure is true.
	// Determines whether or not to consider the entire test as failed if this step fails. Can be used only if `allow_failure` is `true`.
	IsCritical *bool `json:"isCritical,omitempty" tf:"is_critical,omitempty"`

	// (String) Name of Datadog synthetics test.
	// The name of the step.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List, Max: 1) The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below. (see below for nested schema)
	// The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below.
	RequestBasicauth []RequestBasicauthInitParameters `json:"requestBasicauth,omitempty" tf:"request_basicauth,omitempty"`

	// (Block List, Max: 1) Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure below. (see below for nested schema)
	// Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure below.
	RequestClientCertificate []RequestClientCertificateInitParameters `json:"requestClientCertificate,omitempty" tf:"request_client_certificate,omitempty"`

	// (Block List, Max: 1) Required if type = "api". The synthetics test request. (see below for nested schema)
	// The request for the api step.
	RequestDefinition []RequestDefinitionInitParameters `json:"requestDefinition,omitempty" tf:"request_definition,omitempty"`

	// (Map of String) Header name and value map.
	// Header name and value map.
	// +mapType=granular
	RequestHeaders map[string]*string `json:"requestHeaders,omitempty" tf:"request_headers,omitempty"`

	// (Block List, Max: 1) The proxy to perform the test. (see below for nested schema)
	// The proxy to perform the test.
	RequestProxy []RequestProxyInitParameters `json:"requestProxy,omitempty" tf:"request_proxy,omitempty"`

	// (Map of String) Query arguments name and value map.
	// Query arguments name and value map.
	// +mapType=granular
	RequestQuery map[string]*string `json:"requestQuery,omitempty" tf:"request_query,omitempty"`

	// (Block List, Max: 1) (see below for nested schema)
	Retry []RetryInitParameters `json:"retry,omitempty" tf:"retry,omitempty"`

	// (String) The subtype of the Synthetic API test. Defaults to http. Valid values are http, ssl, tcp, dns, multi, icmp, udp, websocket, grpc.
	// The subtype of the Synthetic multistep API test step. Valid values are `http`, `grpc`. Defaults to `"http"`.
	Subtype *string `json:"subtype,omitempty" tf:"subtype,omitempty"`
}

type APIStepObservation struct {

	// (Boolean) Determines whether or not to continue with test if this step fails.
	// Determines whether or not to continue with test if this step fails.
	AllowFailure *bool `json:"allowFailure,omitempty" tf:"allow_failure,omitempty"`

	// (Block List) Assertions used for the test. Multiple assertion blocks are allowed with the structure below. (see below for nested schema)
	// Assertions used for the test. Multiple `assertion` blocks are allowed with the structure below.
	Assertion []AssertionObservation `json:"assertion,omitempty" tf:"assertion,omitempty"`

	// (Block List) Values to parse and save as variables from the response. (see below for nested schema)
	// Values to parse and save as variables from the response.
	ExtractedValue []ExtractedValueObservation `json:"extractedValue,omitempty" tf:"extracted_value,omitempty"`

	// (Boolean) Determines whether or not to consider the entire test as failed if this step fails. Can be used only if allow_failure is true.
	// Determines whether or not to consider the entire test as failed if this step fails. Can be used only if `allow_failure` is `true`.
	IsCritical *bool `json:"isCritical,omitempty" tf:"is_critical,omitempty"`

	// (String) Name of Datadog synthetics test.
	// The name of the step.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List, Max: 1) The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below. (see below for nested schema)
	// The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below.
	RequestBasicauth []RequestBasicauthObservation `json:"requestBasicauth,omitempty" tf:"request_basicauth,omitempty"`

	// (Block List, Max: 1) Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure below. (see below for nested schema)
	// Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure below.
	RequestClientCertificate []RequestClientCertificateObservation `json:"requestClientCertificate,omitempty" tf:"request_client_certificate,omitempty"`

	// (Block List, Max: 1) Required if type = "api". The synthetics test request. (see below for nested schema)
	// The request for the api step.
	RequestDefinition []RequestDefinitionObservation `json:"requestDefinition,omitempty" tf:"request_definition,omitempty"`

	// (Map of String) Header name and value map.
	// Header name and value map.
	// +mapType=granular
	RequestHeaders map[string]*string `json:"requestHeaders,omitempty" tf:"request_headers,omitempty"`

	// (Block List, Max: 1) The proxy to perform the test. (see below for nested schema)
	// The proxy to perform the test.
	RequestProxy []RequestProxyObservation `json:"requestProxy,omitempty" tf:"request_proxy,omitempty"`

	// (Map of String) Query arguments name and value map.
	// Query arguments name and value map.
	// +mapType=granular
	RequestQuery map[string]*string `json:"requestQuery,omitempty" tf:"request_query,omitempty"`

	// (Block List, Max: 1) (see below for nested schema)
	Retry []RetryObservation `json:"retry,omitempty" tf:"retry,omitempty"`

	// (String) The subtype of the Synthetic API test. Defaults to http. Valid values are http, ssl, tcp, dns, multi, icmp, udp, websocket, grpc.
	// The subtype of the Synthetic multistep API test step. Valid values are `http`, `grpc`. Defaults to `"http"`.
	Subtype *string `json:"subtype,omitempty" tf:"subtype,omitempty"`
}

type APIStepParameters struct {

	// (Boolean) Determines whether or not to continue with test if this step fails.
	// Determines whether or not to continue with test if this step fails.
	// +kubebuilder:validation:Optional
	AllowFailure *bool `json:"allowFailure,omitempty" tf:"allow_failure,omitempty"`

	// (Block List) Assertions used for the test. Multiple assertion blocks are allowed with the structure below. (see below for nested schema)
	// Assertions used for the test. Multiple `assertion` blocks are allowed with the structure below.
	// +kubebuilder:validation:Optional
	Assertion []AssertionParameters `json:"assertion,omitempty" tf:"assertion,omitempty"`

	// (Block List) Values to parse and save as variables from the response. (see below for nested schema)
	// Values to parse and save as variables from the response.
	// +kubebuilder:validation:Optional
	ExtractedValue []ExtractedValueParameters `json:"extractedValue,omitempty" tf:"extracted_value,omitempty"`

	// (Boolean) Determines whether or not to consider the entire test as failed if this step fails. Can be used only if allow_failure is true.
	// Determines whether or not to consider the entire test as failed if this step fails. Can be used only if `allow_failure` is `true`.
	// +kubebuilder:validation:Optional
	IsCritical *bool `json:"isCritical,omitempty" tf:"is_critical,omitempty"`

	// (String) Name of Datadog synthetics test.
	// The name of the step.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// (Block List, Max: 1) The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below. (see below for nested schema)
	// The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below.
	// +kubebuilder:validation:Optional
	RequestBasicauth []RequestBasicauthParameters `json:"requestBasicauth,omitempty" tf:"request_basicauth,omitempty"`

	// (Block List, Max: 1) Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure below. (see below for nested schema)
	// Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure below.
	// +kubebuilder:validation:Optional
	RequestClientCertificate []RequestClientCertificateParameters `json:"requestClientCertificate,omitempty" tf:"request_client_certificate,omitempty"`

	// (Block List, Max: 1) Required if type = "api". The synthetics test request. (see below for nested schema)
	// The request for the api step.
	// +kubebuilder:validation:Optional
	RequestDefinition []RequestDefinitionParameters `json:"requestDefinition,omitempty" tf:"request_definition,omitempty"`

	// (Map of String) Header name and value map.
	// Header name and value map.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	RequestHeaders map[string]*string `json:"requestHeaders,omitempty" tf:"request_headers,omitempty"`

	// (Block List, Max: 1) The proxy to perform the test. (see below for nested schema)
	// The proxy to perform the test.
	// +kubebuilder:validation:Optional
	RequestProxy []RequestProxyParameters `json:"requestProxy,omitempty" tf:"request_proxy,omitempty"`

	// (Map of String) Query arguments name and value map.
	// Query arguments name and value map.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	RequestQuery map[string]*string `json:"requestQuery,omitempty" tf:"request_query,omitempty"`

	// (Block List, Max: 1) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Retry []RetryParameters `json:"retry,omitempty" tf:"retry,omitempty"`

	// (String) The subtype of the Synthetic API test. Defaults to http. Valid values are http, ssl, tcp, dns, multi, icmp, udp, websocket, grpc.
	// The subtype of the Synthetic multistep API test step. Valid values are `http`, `grpc`. Defaults to `"http"`.
	// +kubebuilder:validation:Optional
	Subtype *string `json:"subtype,omitempty" tf:"subtype,omitempty"`
}

type AssertionInitParameters struct {

	// (String) Assertion operator. Note Only some combinations of type and operator are valid (please refer to Datadog documentation).
	// Assertion operator. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)).
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) If assertion type is header, this is the header name.
	// If assertion type is `header`, this is the header name.
	Property *string `json:"property,omitempty" tf:"property,omitempty"`

	// (String) Expected value. Depends on the assertion type, refer to Datadog documentation for details.
	// Expected value. Depends on the assertion type, refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test) for details.
	Target *string `json:"target,omitempty" tf:"target,omitempty"`

	// (Block List, Max: 1) Expected structure if operator is validatesJSONPath. Exactly one nested block is allowed with the structure below. (see below for nested schema)
	// Expected structure if `operator` is `validatesJSONPath`. Exactly one nested block is allowed with the structure below.
	Targetjsonpath []TargetjsonpathInitParameters `json:"targetjsonpath,omitempty" tf:"targetjsonpath,omitempty"`

	// (Block List, Max: 1) Expected structure if operator is validatesXPath. Exactly one nested block is allowed with the structure below. (see below for nested schema)
	// Expected structure if `operator` is `validatesXPath`. Exactly one nested block is allowed with the structure below.
	Targetxpath []TargetxpathInitParameters `json:"targetxpath,omitempty" tf:"targetxpath,omitempty"`

	// (String) Timings scope for response time assertions. Valid values are all, withoutDNS.
	// Timings scope for response time assertions. Valid values are `all`, `withoutDNS`.
	TimingsScope *string `json:"timingsScope,omitempty" tf:"timings_scope,omitempty"`

	// (String) Synthetics test type. Valid values are api, browser.
	// Type of assertion. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)). Valid values are `body`, `header`, `statusCode`, `certificate`, `responseTime`, `property`, `recordEvery`, `recordSome`, `tlsVersion`, `minTlsVersion`, `latency`, `packetLossPercentage`, `packetsReceived`, `networkHop`, `receivedMessage`, `grpcHealthcheckStatus`, `grpcMetadata`, `grpcProto`, `connection`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type AssertionObservation struct {

	// (String) Assertion operator. Note Only some combinations of type and operator are valid (please refer to Datadog documentation).
	// Assertion operator. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)).
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) If assertion type is header, this is the header name.
	// If assertion type is `header`, this is the header name.
	Property *string `json:"property,omitempty" tf:"property,omitempty"`

	// (String) Expected value. Depends on the assertion type, refer to Datadog documentation for details.
	// Expected value. Depends on the assertion type, refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test) for details.
	Target *string `json:"target,omitempty" tf:"target,omitempty"`

	// (Block List, Max: 1) Expected structure if operator is validatesJSONPath. Exactly one nested block is allowed with the structure below. (see below for nested schema)
	// Expected structure if `operator` is `validatesJSONPath`. Exactly one nested block is allowed with the structure below.
	Targetjsonpath []TargetjsonpathObservation `json:"targetjsonpath,omitempty" tf:"targetjsonpath,omitempty"`

	// (Block List, Max: 1) Expected structure if operator is validatesXPath. Exactly one nested block is allowed with the structure below. (see below for nested schema)
	// Expected structure if `operator` is `validatesXPath`. Exactly one nested block is allowed with the structure below.
	Targetxpath []TargetxpathObservation `json:"targetxpath,omitempty" tf:"targetxpath,omitempty"`

	// (String) Timings scope for response time assertions. Valid values are all, withoutDNS.
	// Timings scope for response time assertions. Valid values are `all`, `withoutDNS`.
	TimingsScope *string `json:"timingsScope,omitempty" tf:"timings_scope,omitempty"`

	// (String) Synthetics test type. Valid values are api, browser.
	// Type of assertion. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)). Valid values are `body`, `header`, `statusCode`, `certificate`, `responseTime`, `property`, `recordEvery`, `recordSome`, `tlsVersion`, `minTlsVersion`, `latency`, `packetLossPercentage`, `packetsReceived`, `networkHop`, `receivedMessage`, `grpcHealthcheckStatus`, `grpcMetadata`, `grpcProto`, `connection`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type AssertionParameters struct {

	// (String) Assertion operator. Note Only some combinations of type and operator are valid (please refer to Datadog documentation).
	// Assertion operator. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)).
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) If assertion type is header, this is the header name.
	// If assertion type is `header`, this is the header name.
	// +kubebuilder:validation:Optional
	Property *string `json:"property,omitempty" tf:"property,omitempty"`

	// (String) Expected value. Depends on the assertion type, refer to Datadog documentation for details.
	// Expected value. Depends on the assertion type, refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test) for details.
	// +kubebuilder:validation:Optional
	Target *string `json:"target,omitempty" tf:"target,omitempty"`

	// (Block List, Max: 1) Expected structure if operator is validatesJSONPath. Exactly one nested block is allowed with the structure below. (see below for nested schema)
	// Expected structure if `operator` is `validatesJSONPath`. Exactly one nested block is allowed with the structure below.
	// +kubebuilder:validation:Optional
	Targetjsonpath []TargetjsonpathParameters `json:"targetjsonpath,omitempty" tf:"targetjsonpath,omitempty"`

	// (Block List, Max: 1) Expected structure if operator is validatesXPath. Exactly one nested block is allowed with the structure below. (see below for nested schema)
	// Expected structure if `operator` is `validatesXPath`. Exactly one nested block is allowed with the structure below.
	// +kubebuilder:validation:Optional
	Targetxpath []TargetxpathParameters `json:"targetxpath,omitempty" tf:"targetxpath,omitempty"`

	// (String) Timings scope for response time assertions. Valid values are all, withoutDNS.
	// Timings scope for response time assertions. Valid values are `all`, `withoutDNS`.
	// +kubebuilder:validation:Optional
	TimingsScope *string `json:"timingsScope,omitempty" tf:"timings_scope,omitempty"`

	// (String) Synthetics test type. Valid values are api, browser.
	// Type of assertion. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)). Valid values are `body`, `header`, `statusCode`, `certificate`, `responseTime`, `property`, `recordEvery`, `recordSome`, `tlsVersion`, `minTlsVersion`, `latency`, `packetLossPercentage`, `packetsReceived`, `networkHop`, `receivedMessage`, `grpcHealthcheckStatus`, `grpcMetadata`, `grpcProto`, `connection`.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type AssertionTargetjsonpathInitParameters struct {

	// (String) The JSON path to assert.
	// The JSON path to assert.
	Jsonpath *string `json:"jsonpath,omitempty" tf:"jsonpath,omitempty"`

	// (String) Assertion operator. Note Only some combinations of type and operator are valid (please refer to Datadog documentation).
	// The specific operator to use on the path.
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) Expected matching value.
	// Expected matching value.
	Targetvalue *string `json:"targetvalue,omitempty" tf:"targetvalue,omitempty"`
}

type AssertionTargetjsonpathObservation struct {

	// (String) The JSON path to assert.
	// The JSON path to assert.
	Jsonpath *string `json:"jsonpath,omitempty" tf:"jsonpath,omitempty"`

	// (String) Assertion operator. Note Only some combinations of type and operator are valid (please refer to Datadog documentation).
	// The specific operator to use on the path.
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) Expected matching value.
	// Expected matching value.
	Targetvalue *string `json:"targetvalue,omitempty" tf:"targetvalue,omitempty"`
}

type AssertionTargetjsonpathParameters struct {

	// (String) The JSON path to assert.
	// The JSON path to assert.
	// +kubebuilder:validation:Optional
	Jsonpath *string `json:"jsonpath" tf:"jsonpath,omitempty"`

	// (String) Assertion operator. Note Only some combinations of type and operator are valid (please refer to Datadog documentation).
	// The specific operator to use on the path.
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) Expected matching value.
	// Expected matching value.
	// +kubebuilder:validation:Optional
	Targetvalue *string `json:"targetvalue,omitempty" tf:"targetvalue,omitempty"`
}

type AssertionTargetxpathInitParameters struct {

	// (String) Assertion operator. Note Only some combinations of type and operator are valid (please refer to Datadog documentation).
	// The specific operator to use on the path.
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) Expected matching value.
	// Expected matching value.
	Targetvalue *string `json:"targetvalue,omitempty" tf:"targetvalue,omitempty"`

	// (String) The xpath to assert.
	// The xpath to assert.
	Xpath *string `json:"xpath,omitempty" tf:"xpath,omitempty"`
}

type AssertionTargetxpathObservation struct {

	// (String) Assertion operator. Note Only some combinations of type and operator are valid (please refer to Datadog documentation).
	// The specific operator to use on the path.
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) Expected matching value.
	// Expected matching value.
	Targetvalue *string `json:"targetvalue,omitempty" tf:"targetvalue,omitempty"`

	// (String) The xpath to assert.
	// The xpath to assert.
	Xpath *string `json:"xpath,omitempty" tf:"xpath,omitempty"`
}

type AssertionTargetxpathParameters struct {

	// (String) Assertion operator. Note Only some combinations of type and operator are valid (please refer to Datadog documentation).
	// The specific operator to use on the path.
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) Expected matching value.
	// Expected matching value.
	// +kubebuilder:validation:Optional
	Targetvalue *string `json:"targetvalue,omitempty" tf:"targetvalue,omitempty"`

	// (String) The xpath to assert.
	// The xpath to assert.
	// +kubebuilder:validation:Optional
	Xpath *string `json:"xpath" tf:"xpath,omitempty"`
}

type BrowserStepInitParameters struct {

	// (Boolean) Determines whether or not to continue with test if this step fails.
	// Determines if the step should be allowed to fail.
	AllowFailure *bool `json:"allowFailure,omitempty" tf:"allow_failure,omitempty"`

	// (Boolean) Force update of the "element" parameter for the step
	// Force update of the "element" parameter for the step
	ForceElementUpdate *bool `json:"forceElementUpdate,omitempty" tf:"force_element_update,omitempty"`

	// (Boolean) Determines whether or not to consider the entire test as failed if this step fails. Can be used only if allow_failure is true.
	// Determines whether or not to consider the entire test as failed if this step fails. Can be used only if `allow_failure` is `true`.
	IsCritical *bool `json:"isCritical,omitempty" tf:"is_critical,omitempty"`

	// (String) Name of Datadog synthetics test.
	// Name of the step.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Boolean) Prevents saving screenshots of the step.
	// Prevents saving screenshots of the step.
	NoScreenshot *bool `json:"noScreenshot,omitempty" tf:"no_screenshot,omitempty"`

	// (Block List, Min: 1, Max: 1) Parameters for the step. (see below for nested schema)
	// Parameters for the step.
	Params []ParamsInitParameters `json:"params,omitempty" tf:"params,omitempty"`

	// (Number) Timeout in seconds for the test. Defaults to 60.
	// Used to override the default timeout of a step.
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// (String) Synthetics test type. Valid values are api, browser.
	// Type of the step. Valid values are `assertCurrentUrl`, `assertElementAttribute`, `assertElementContent`, `assertElementPresent`, `assertEmail`, `assertFileDownload`, `assertFromJavascript`, `assertPageContains`, `assertPageLacks`, `click`, `extractFromJavascript`, `extractVariable`, `goToEmailLink`, `goToUrl`, `goToUrlAndMeasureTti`, `hover`, `playSubTest`, `pressKey`, `refresh`, `runApiTest`, `scroll`, `selectOption`, `typeText`, `uploadFiles`, `wait`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type BrowserStepObservation struct {

	// (Boolean) Determines whether or not to continue with test if this step fails.
	// Determines if the step should be allowed to fail.
	AllowFailure *bool `json:"allowFailure,omitempty" tf:"allow_failure,omitempty"`

	// (Boolean) Force update of the "element" parameter for the step
	// Force update of the "element" parameter for the step
	ForceElementUpdate *bool `json:"forceElementUpdate,omitempty" tf:"force_element_update,omitempty"`

	// (Boolean) Determines whether or not to consider the entire test as failed if this step fails. Can be used only if allow_failure is true.
	// Determines whether or not to consider the entire test as failed if this step fails. Can be used only if `allow_failure` is `true`.
	IsCritical *bool `json:"isCritical,omitempty" tf:"is_critical,omitempty"`

	// (String) Name of Datadog synthetics test.
	// Name of the step.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Boolean) Prevents saving screenshots of the step.
	// Prevents saving screenshots of the step.
	NoScreenshot *bool `json:"noScreenshot,omitempty" tf:"no_screenshot,omitempty"`

	// (Block List, Min: 1, Max: 1) Parameters for the step. (see below for nested schema)
	// Parameters for the step.
	Params []ParamsObservation `json:"params,omitempty" tf:"params,omitempty"`

	// (Number) Timeout in seconds for the test. Defaults to 60.
	// Used to override the default timeout of a step.
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// (String) Synthetics test type. Valid values are api, browser.
	// Type of the step. Valid values are `assertCurrentUrl`, `assertElementAttribute`, `assertElementContent`, `assertElementPresent`, `assertEmail`, `assertFileDownload`, `assertFromJavascript`, `assertPageContains`, `assertPageLacks`, `click`, `extractFromJavascript`, `extractVariable`, `goToEmailLink`, `goToUrl`, `goToUrlAndMeasureTti`, `hover`, `playSubTest`, `pressKey`, `refresh`, `runApiTest`, `scroll`, `selectOption`, `typeText`, `uploadFiles`, `wait`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type BrowserStepParameters struct {

	// (Boolean) Determines whether or not to continue with test if this step fails.
	// Determines if the step should be allowed to fail.
	// +kubebuilder:validation:Optional
	AllowFailure *bool `json:"allowFailure,omitempty" tf:"allow_failure,omitempty"`

	// (Boolean) Force update of the "element" parameter for the step
	// Force update of the "element" parameter for the step
	// +kubebuilder:validation:Optional
	ForceElementUpdate *bool `json:"forceElementUpdate,omitempty" tf:"force_element_update,omitempty"`

	// (Boolean) Determines whether or not to consider the entire test as failed if this step fails. Can be used only if allow_failure is true.
	// Determines whether or not to consider the entire test as failed if this step fails. Can be used only if `allow_failure` is `true`.
	// +kubebuilder:validation:Optional
	IsCritical *bool `json:"isCritical,omitempty" tf:"is_critical,omitempty"`

	// (String) Name of Datadog synthetics test.
	// Name of the step.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// (Boolean) Prevents saving screenshots of the step.
	// Prevents saving screenshots of the step.
	// +kubebuilder:validation:Optional
	NoScreenshot *bool `json:"noScreenshot,omitempty" tf:"no_screenshot,omitempty"`

	// (Block List, Min: 1, Max: 1) Parameters for the step. (see below for nested schema)
	// Parameters for the step.
	// +kubebuilder:validation:Optional
	Params []ParamsParameters `json:"params" tf:"params,omitempty"`

	// (Number) Timeout in seconds for the test. Defaults to 60.
	// Used to override the default timeout of a step.
	// +kubebuilder:validation:Optional
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// (String) Synthetics test type. Valid values are api, browser.
	// Type of the step. Valid values are `assertCurrentUrl`, `assertElementAttribute`, `assertElementContent`, `assertElementPresent`, `assertEmail`, `assertFileDownload`, `assertFromJavascript`, `assertPageContains`, `assertPageLacks`, `click`, `extractFromJavascript`, `extractVariable`, `goToEmailLink`, `goToUrl`, `goToUrlAndMeasureTti`, `hover`, `playSubTest`, `pressKey`, `refresh`, `runApiTest`, `scroll`, `selectOption`, `typeText`, `uploadFiles`, `wait`.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type BrowserVariableInitParameters struct {

	// (String) Example of the extracted variable. Defaults to "".
	// Example for the variable. Defaults to `""`.
	Example *string `json:"example,omitempty" tf:"example,omitempty"`

	// (String) The ID of this resource.
	// ID of the global variable to use. This is actually only used (and required) in the case of using a variable of type `global`.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Name of Datadog synthetics test.
	// Name of the variable.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Pattern of the variable. Defaults to "".
	// Pattern of the variable. Defaults to `""`.
	Pattern *string `json:"pattern,omitempty" tf:"pattern,omitempty"`

	// (Boolean) Determines whether or not the extracted value will be obfuscated.
	// Determines whether or not the browser test variable is obfuscated. Can only be used with a browser variable of type `text`
	Secure *bool `json:"secure,omitempty" tf:"secure,omitempty"`

	// (String) Synthetics test type. Valid values are api, browser.
	// Type of browser test variable. Valid values are `element`, `email`, `global`, `javascript`, `text`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type BrowserVariableObservation struct {

	// (String) Example of the extracted variable. Defaults to "".
	// Example for the variable. Defaults to `""`.
	Example *string `json:"example,omitempty" tf:"example,omitempty"`

	// (String) The ID of this resource.
	// ID of the global variable to use. This is actually only used (and required) in the case of using a variable of type `global`.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Name of Datadog synthetics test.
	// Name of the variable.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Pattern of the variable. Defaults to "".
	// Pattern of the variable. Defaults to `""`.
	Pattern *string `json:"pattern,omitempty" tf:"pattern,omitempty"`

	// (Boolean) Determines whether or not the extracted value will be obfuscated.
	// Determines whether or not the browser test variable is obfuscated. Can only be used with a browser variable of type `text`
	Secure *bool `json:"secure,omitempty" tf:"secure,omitempty"`

	// (String) Synthetics test type. Valid values are api, browser.
	// Type of browser test variable. Valid values are `element`, `email`, `global`, `javascript`, `text`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type BrowserVariableParameters struct {

	// (String) Example of the extracted variable. Defaults to "".
	// Example for the variable. Defaults to `""`.
	// +kubebuilder:validation:Optional
	Example *string `json:"example,omitempty" tf:"example,omitempty"`

	// (String) The ID of this resource.
	// ID of the global variable to use. This is actually only used (and required) in the case of using a variable of type `global`.
	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Name of Datadog synthetics test.
	// Name of the variable.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// (String) Pattern of the variable. Defaults to "".
	// Pattern of the variable. Defaults to `""`.
	// +kubebuilder:validation:Optional
	Pattern *string `json:"pattern,omitempty" tf:"pattern,omitempty"`

	// (Boolean) Determines whether or not the extracted value will be obfuscated.
	// Determines whether or not the browser test variable is obfuscated. Can only be used with a browser variable of type `text`
	// +kubebuilder:validation:Optional
	Secure *bool `json:"secure,omitempty" tf:"secure,omitempty"`

	// (String) Synthetics test type. Valid values are api, browser.
	// Type of browser test variable. Valid values are `element`, `email`, `global`, `javascript`, `text`.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type CertInitParameters struct {

	// (String) File name for the certificate.
	// File name for the certificate.
	Filename *string `json:"filename,omitempty" tf:"filename,omitempty"`
}

type CertObservation struct {

	// (String) File name for the certificate.
	// File name for the certificate.
	Filename *string `json:"filename,omitempty" tf:"filename,omitempty"`
}

type CertParameters struct {

	// (String, Sensitive) Content of the certificate.
	// Content of the certificate.
	// +kubebuilder:validation:Required
	ContentSecretRef v1.SecretKeySelector `json:"contentSecretRef" tf:"-"`

	// (String) File name for the certificate.
	// File name for the certificate.
	// +kubebuilder:validation:Optional
	Filename *string `json:"filename,omitempty" tf:"filename,omitempty"`
}

type CiInitParameters struct {

	// (String) Execution rule for a Synthetics test. Valid values are blocking, non_blocking, skipped.
	// Execution rule for a Synthetics test. Valid values are `blocking`, `non_blocking`, `skipped`.
	ExecutionRule *string `json:"executionRule,omitempty" tf:"execution_rule,omitempty"`
}

type CiObservation struct {

	// (String) Execution rule for a Synthetics test. Valid values are blocking, non_blocking, skipped.
	// Execution rule for a Synthetics test. Valid values are `blocking`, `non_blocking`, `skipped`.
	ExecutionRule *string `json:"executionRule,omitempty" tf:"execution_rule,omitempty"`
}

type CiParameters struct {

	// (String) Execution rule for a Synthetics test. Valid values are blocking, non_blocking, skipped.
	// Execution rule for a Synthetics test. Valid values are `blocking`, `non_blocking`, `skipped`.
	// +kubebuilder:validation:Optional
	ExecutionRule *string `json:"executionRule,omitempty" tf:"execution_rule,omitempty"`
}

type ConfigVariableInitParameters struct {

	// (String) Example of the extracted variable. Defaults to "".
	// Example for the variable. This value is not returned by the api when `secure = true`.
	Example *string `json:"example,omitempty" tf:"example,omitempty"`

	// (String) The ID of this resource.
	// When type = `global`, ID of the global variable to use.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Name of Datadog synthetics test.
	// Name of the variable.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Pattern of the variable. Defaults to "".
	// Pattern of the variable. This value is not returned by the api when `secure = true`.
	Pattern *string `json:"pattern,omitempty" tf:"pattern,omitempty"`

	// (Boolean) Determines whether or not the extracted value will be obfuscated.
	// Whether the value of this variable will be obfuscated in test results. Defaults to `false`.
	Secure *bool `json:"secure,omitempty" tf:"secure,omitempty"`

	// (String) Synthetics test type. Valid values are api, browser.
	// Type of test configuration variable. Valid values are `global`, `text`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ConfigVariableObservation struct {

	// (String) Example of the extracted variable. Defaults to "".
	// Example for the variable. This value is not returned by the api when `secure = true`.
	Example *string `json:"example,omitempty" tf:"example,omitempty"`

	// (String) The ID of this resource.
	// When type = `global`, ID of the global variable to use.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Name of Datadog synthetics test.
	// Name of the variable.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Pattern of the variable. Defaults to "".
	// Pattern of the variable. This value is not returned by the api when `secure = true`.
	Pattern *string `json:"pattern,omitempty" tf:"pattern,omitempty"`

	// (Boolean) Determines whether or not the extracted value will be obfuscated.
	// Whether the value of this variable will be obfuscated in test results. Defaults to `false`.
	Secure *bool `json:"secure,omitempty" tf:"secure,omitempty"`

	// (String) Synthetics test type. Valid values are api, browser.
	// Type of test configuration variable. Valid values are `global`, `text`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ConfigVariableParameters struct {

	// (String) Example of the extracted variable. Defaults to "".
	// Example for the variable. This value is not returned by the api when `secure = true`.
	// +kubebuilder:validation:Optional
	Example *string `json:"example,omitempty" tf:"example,omitempty"`

	// (String) The ID of this resource.
	// When type = `global`, ID of the global variable to use.
	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Name of Datadog synthetics test.
	// Name of the variable.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// (String) Pattern of the variable. Defaults to "".
	// Pattern of the variable. This value is not returned by the api when `secure = true`.
	// +kubebuilder:validation:Optional
	Pattern *string `json:"pattern,omitempty" tf:"pattern,omitempty"`

	// (Boolean) Determines whether or not the extracted value will be obfuscated.
	// Whether the value of this variable will be obfuscated in test results. Defaults to `false`.
	// +kubebuilder:validation:Optional
	Secure *bool `json:"secure,omitempty" tf:"secure,omitempty"`

	// (String) Synthetics test type. Valid values are api, browser.
	// Type of test configuration variable. Valid values are `global`, `text`.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type ElementUserLocatorInitParameters struct {

	// (Boolean) Defaults to false.
	// Defaults to `false`.
	FailTestOnCannotLocate *bool `json:"failTestOnCannotLocate,omitempty" tf:"fail_test_on_cannot_locate,omitempty"`

	// (String) Regex or JSON path used for the parser. Not used with type raw.
	Value []ValueInitParameters `json:"value,omitempty" tf:"value,omitempty"`
}

type ElementUserLocatorObservation struct {

	// (Boolean) Defaults to false.
	// Defaults to `false`.
	FailTestOnCannotLocate *bool `json:"failTestOnCannotLocate,omitempty" tf:"fail_test_on_cannot_locate,omitempty"`

	// (String) Regex or JSON path used for the parser. Not used with type raw.
	Value []ValueObservation `json:"value,omitempty" tf:"value,omitempty"`
}

type ElementUserLocatorParameters struct {

	// (Boolean) Defaults to false.
	// Defaults to `false`.
	// +kubebuilder:validation:Optional
	FailTestOnCannotLocate *bool `json:"failTestOnCannotLocate,omitempty" tf:"fail_test_on_cannot_locate,omitempty"`

	// (String) Regex or JSON path used for the parser. Not used with type raw.
	// +kubebuilder:validation:Optional
	Value []ValueParameters `json:"value" tf:"value,omitempty"`
}

type ExtractedValueInitParameters struct {

	// (String) When type is http_header, name of the header to use to extract the value.
	// When type is `http_header`, name of the header to use to extract the value.
	Field *string `json:"field,omitempty" tf:"field,omitempty"`

	// (String) Name of Datadog synthetics test.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List, Min: 1, Max: 1) (see below for nested schema)
	Parser []ExtractedValueParserInitParameters `json:"parser,omitempty" tf:"parser,omitempty"`

	// (Boolean) Determines whether or not the extracted value will be obfuscated.
	// Determines whether or not the extracted value will be obfuscated.
	Secure *bool `json:"secure,omitempty" tf:"secure,omitempty"`

	// (String) Synthetics test type. Valid values are api, browser.
	// Property of the Synthetics Test Response to use for the variable. Valid values are `http_body`, `http_header`, `local_variable`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ExtractedValueObservation struct {

	// (String) When type is http_header, name of the header to use to extract the value.
	// When type is `http_header`, name of the header to use to extract the value.
	Field *string `json:"field,omitempty" tf:"field,omitempty"`

	// (String) Name of Datadog synthetics test.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List, Min: 1, Max: 1) (see below for nested schema)
	Parser []ExtractedValueParserObservation `json:"parser,omitempty" tf:"parser,omitempty"`

	// (Boolean) Determines whether or not the extracted value will be obfuscated.
	// Determines whether or not the extracted value will be obfuscated.
	Secure *bool `json:"secure,omitempty" tf:"secure,omitempty"`

	// (String) Synthetics test type. Valid values are api, browser.
	// Property of the Synthetics Test Response to use for the variable. Valid values are `http_body`, `http_header`, `local_variable`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ExtractedValueParameters struct {

	// (String) When type is http_header, name of the header to use to extract the value.
	// When type is `http_header`, name of the header to use to extract the value.
	// +kubebuilder:validation:Optional
	Field *string `json:"field,omitempty" tf:"field,omitempty"`

	// (String) Name of Datadog synthetics test.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// (Block List, Min: 1, Max: 1) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Parser []ExtractedValueParserParameters `json:"parser" tf:"parser,omitempty"`

	// (Boolean) Determines whether or not the extracted value will be obfuscated.
	// Determines whether or not the extracted value will be obfuscated.
	// +kubebuilder:validation:Optional
	Secure *bool `json:"secure,omitempty" tf:"secure,omitempty"`

	// (String) Synthetics test type. Valid values are api, browser.
	// Property of the Synthetics Test Response to use for the variable. Valid values are `http_body`, `http_header`, `local_variable`.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type ExtractedValueParserInitParameters struct {

	// (String) Synthetics test type. Valid values are api, browser.
	// Type of parser for a Synthetics global variable from a synthetics test. Valid values are `raw`, `json_path`, `regex`, `x_path`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) Regex or JSON path used for the parser. Not used with type raw.
	// Regex or JSON path used for the parser. Not used with type `raw`.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ExtractedValueParserObservation struct {

	// (String) Synthetics test type. Valid values are api, browser.
	// Type of parser for a Synthetics global variable from a synthetics test. Valid values are `raw`, `json_path`, `regex`, `x_path`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) Regex or JSON path used for the parser. Not used with type raw.
	// Regex or JSON path used for the parser. Not used with type `raw`.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ExtractedValueParserParameters struct {

	// (String) Synthetics test type. Valid values are api, browser.
	// Type of parser for a Synthetics global variable from a synthetics test. Valid values are `raw`, `json_path`, `regex`, `x_path`.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`

	// (String) Regex or JSON path used for the parser. Not used with type raw.
	// Regex or JSON path used for the parser. Not used with type `raw`.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type KeyInitParameters struct {

	// (String) File name for the certificate.
	// File name for the certificate.
	Filename *string `json:"filename,omitempty" tf:"filename,omitempty"`
}

type KeyObservation struct {

	// (String) File name for the certificate.
	// File name for the certificate.
	Filename *string `json:"filename,omitempty" tf:"filename,omitempty"`
}

type KeyParameters struct {

	// (String, Sensitive) Content of the certificate.
	// Content of the certificate.
	// +kubebuilder:validation:Required
	ContentSecretRef v1.SecretKeySelector `json:"contentSecretRef" tf:"-"`

	// (String) File name for the certificate.
	// File name for the certificate.
	// +kubebuilder:validation:Optional
	Filename *string `json:"filename,omitempty" tf:"filename,omitempty"`
}

type MonitorOptionsInitParameters struct {

	// (Number) Specify a renotification frequency in minutes. Values available by default are 0, 10, 20, 30, 40, 50, 60, 90, 120, 180, 240, 300, 360, 720, 1440. Defaults to 0.
	// Specify a renotification frequency in minutes. Values available by default are `0`, `10`, `20`, `30`, `40`, `50`, `60`, `90`, `120`, `180`, `240`, `300`, `360`, `720`, `1440`. Defaults to `0`.
	RenotifyInterval *float64 `json:"renotifyInterval,omitempty" tf:"renotify_interval,omitempty"`
}

type MonitorOptionsObservation struct {

	// (Number) Specify a renotification frequency in minutes. Values available by default are 0, 10, 20, 30, 40, 50, 60, 90, 120, 180, 240, 300, 360, 720, 1440. Defaults to 0.
	// Specify a renotification frequency in minutes. Values available by default are `0`, `10`, `20`, `30`, `40`, `50`, `60`, `90`, `120`, `180`, `240`, `300`, `360`, `720`, `1440`. Defaults to `0`.
	RenotifyInterval *float64 `json:"renotifyInterval,omitempty" tf:"renotify_interval,omitempty"`
}

type MonitorOptionsParameters struct {

	// (Number) Specify a renotification frequency in minutes. Values available by default are 0, 10, 20, 30, 40, 50, 60, 90, 120, 180, 240, 300, 360, 720, 1440. Defaults to 0.
	// Specify a renotification frequency in minutes. Values available by default are `0`, `10`, `20`, `30`, `40`, `50`, `60`, `90`, `120`, `180`, `240`, `300`, `360`, `720`, `1440`. Defaults to `0`.
	// +kubebuilder:validation:Optional
	RenotifyInterval *float64 `json:"renotifyInterval,omitempty" tf:"renotify_interval,omitempty"`
}

type OptionsListInitParameters struct {

	// (Boolean) For SSL test, whether or not the test should allow self signed certificates.
	// For SSL test, whether or not the test should allow self signed certificates.
	AcceptSelfSigned *bool `json:"acceptSelfSigned,omitempty" tf:"accept_self_signed,omitempty"`

	// (Boolean) Allows loading insecure content for an HTTP request in an API test or in a multistep API test step.
	// Allows loading insecure content for an HTTP request in an API test or in a multistep API test step.
	AllowInsecure *bool `json:"allowInsecure,omitempty" tf:"allow_insecure,omitempty"`

	// (Boolean) For SSL test, whether or not the test should fail on revoked certificate in stapled OCSP.
	// For SSL test, whether or not the test should fail on revoked certificate in stapled OCSP.
	CheckCertificateRevocation *bool `json:"checkCertificateRevocation,omitempty" tf:"check_certificate_revocation,omitempty"`

	// (Block List, Max: 1) CI/CD options for a Synthetic test. (see below for nested schema)
	// CI/CD options for a Synthetic test.
	Ci []CiInitParameters `json:"ci,omitempty" tf:"ci,omitempty"`

	// Origin Resource Sharing for browser tests.
	// Disable Cross-Origin Resource Sharing for browser tests.
	DisableCors *bool `json:"disableCors,omitempty" tf:"disable_cors,omitempty"`

	// (Boolean) Disable Content Security Policy for browser tests.
	// Disable Content Security Policy for browser tests.
	DisableCsp *bool `json:"disableCsp,omitempty" tf:"disable_csp,omitempty"`

	// (Boolean) Determines whether or not the API HTTP test should follow redirects.
	// Determines whether or not the API HTTP test should follow redirects.
	FollowRedirects *bool `json:"followRedirects,omitempty" tf:"follow_redirects,omitempty"`

	// (String) HTTP version to use for a Synthetics API test. Valid values are http1, http2, any.
	// HTTP version to use for a Synthetics API test. Valid values are `http1`, `http2`, `any`.
	HTTPVersion *string `json:"httpVersion,omitempty" tf:"http_version,omitempty"`

	// (Boolean) Ignore server certificate error for browser tests.
	// Ignore server certificate error for browser tests.
	IgnoreServerCertificateError *bool `json:"ignoreServerCertificateError,omitempty" tf:"ignore_server_certificate_error,omitempty"`

	// (Number) Timeout before declaring the initial step as failed (in seconds) for browser tests.
	// Timeout before declaring the initial step as failed (in seconds) for browser tests.
	InitialNavigationTimeout *float64 `json:"initialNavigationTimeout,omitempty" tf:"initial_navigation_timeout,omitempty"`

	// (Number) Minimum amount of time in failure required to trigger an alert (in seconds). Default is 0.
	// Minimum amount of time in failure required to trigger an alert (in seconds). Default is `0`.
	MinFailureDuration *float64 `json:"minFailureDuration,omitempty" tf:"min_failure_duration,omitempty"`

	// (Number) Minimum number of locations in failure required to trigger an alert. Defaults to 1.
	// Minimum number of locations in failure required to trigger an alert. Defaults to `1`.
	MinLocationFailed *float64 `json:"minLocationFailed,omitempty" tf:"min_location_failed,omitempty"`

	// (String) The monitor name is used for the alert title as well as for all monitor dashboard widgets and SLOs.
	// The monitor name is used for the alert title as well as for all monitor dashboard widgets and SLOs.
	MonitorName *string `json:"monitorName,omitempty" tf:"monitor_name,omitempty"`

	// (Block List, Max: 1) (see below for nested schema)
	MonitorOptions []MonitorOptionsInitParameters `json:"monitorOptions,omitempty" tf:"monitor_options,omitempty"`

	// (Number)
	MonitorPriority *float64 `json:"monitorPriority,omitempty" tf:"monitor_priority,omitempty"`

	// (Boolean) Prevents saving screenshots of the step.
	// Prevents saving screenshots of the steps.
	NoScreenshot *bool `json:"noScreenshot,omitempty" tf:"no_screenshot,omitempty"`

	// (Set of String) A list of role identifiers pulled from the Roles API to restrict read and write access.
	// A list of role identifiers pulled from the Roles API to restrict read and write access.
	// +listType=set
	RestrictedRoles []*string `json:"restrictedRoles,omitempty" tf:"restricted_roles,omitempty"`

	// (Block List, Max: 1) (see below for nested schema)
	Retry []OptionsListRetryInitParameters `json:"retry,omitempty" tf:"retry,omitempty"`

	// (Block List, Max: 1) The RUM data collection settings for the Synthetic browser test. (see below for nested schema)
	// The RUM data collection settings for the Synthetic browser test.
	RumSettings []string `json:"rumSettings,omitempty" tf:"rum_settings,omitempty"`

	// (Block List, Max: 1) Object containing timeframes and timezone used for advanced scheduling. (see below for nested schema)
	// Object containing timeframes and timezone used for advanced scheduling.
	Scheduling []SchedulingInitParameters `json:"scheduling,omitempty" tf:"scheduling,omitempty"`

	// (Number) How often the test should run (in seconds).
	// How often the test should run (in seconds).
	TickEvery *float64 `json:"tickEvery,omitempty" tf:"tick_every,omitempty"`
}

type OptionsListObservation struct {

	// (Boolean) For SSL test, whether or not the test should allow self signed certificates.
	// For SSL test, whether or not the test should allow self signed certificates.
	AcceptSelfSigned *bool `json:"acceptSelfSigned,omitempty" tf:"accept_self_signed,omitempty"`

	// (Boolean) Allows loading insecure content for an HTTP request in an API test or in a multistep API test step.
	// Allows loading insecure content for an HTTP request in an API test or in a multistep API test step.
	AllowInsecure *bool `json:"allowInsecure,omitempty" tf:"allow_insecure,omitempty"`

	// (Boolean) For SSL test, whether or not the test should fail on revoked certificate in stapled OCSP.
	// For SSL test, whether or not the test should fail on revoked certificate in stapled OCSP.
	CheckCertificateRevocation *bool `json:"checkCertificateRevocation,omitempty" tf:"check_certificate_revocation,omitempty"`

	// (Block List, Max: 1) CI/CD options for a Synthetic test. (see below for nested schema)
	// CI/CD options for a Synthetic test.
	Ci []CiObservation `json:"ci,omitempty" tf:"ci,omitempty"`

	// Origin Resource Sharing for browser tests.
	// Disable Cross-Origin Resource Sharing for browser tests.
	DisableCors *bool `json:"disableCors,omitempty" tf:"disable_cors,omitempty"`

	// (Boolean) Disable Content Security Policy for browser tests.
	// Disable Content Security Policy for browser tests.
	DisableCsp *bool `json:"disableCsp,omitempty" tf:"disable_csp,omitempty"`

	// (Boolean) Determines whether or not the API HTTP test should follow redirects.
	// Determines whether or not the API HTTP test should follow redirects.
	FollowRedirects *bool `json:"followRedirects,omitempty" tf:"follow_redirects,omitempty"`

	// (String) HTTP version to use for a Synthetics API test. Valid values are http1, http2, any.
	// HTTP version to use for a Synthetics API test. Valid values are `http1`, `http2`, `any`.
	HTTPVersion *string `json:"httpVersion,omitempty" tf:"http_version,omitempty"`

	// (Boolean) Ignore server certificate error for browser tests.
	// Ignore server certificate error for browser tests.
	IgnoreServerCertificateError *bool `json:"ignoreServerCertificateError,omitempty" tf:"ignore_server_certificate_error,omitempty"`

	// (Number) Timeout before declaring the initial step as failed (in seconds) for browser tests.
	// Timeout before declaring the initial step as failed (in seconds) for browser tests.
	InitialNavigationTimeout *float64 `json:"initialNavigationTimeout,omitempty" tf:"initial_navigation_timeout,omitempty"`

	// (Number) Minimum amount of time in failure required to trigger an alert (in seconds). Default is 0.
	// Minimum amount of time in failure required to trigger an alert (in seconds). Default is `0`.
	MinFailureDuration *float64 `json:"minFailureDuration,omitempty" tf:"min_failure_duration,omitempty"`

	// (Number) Minimum number of locations in failure required to trigger an alert. Defaults to 1.
	// Minimum number of locations in failure required to trigger an alert. Defaults to `1`.
	MinLocationFailed *float64 `json:"minLocationFailed,omitempty" tf:"min_location_failed,omitempty"`

	// (String) The monitor name is used for the alert title as well as for all monitor dashboard widgets and SLOs.
	// The monitor name is used for the alert title as well as for all monitor dashboard widgets and SLOs.
	MonitorName *string `json:"monitorName,omitempty" tf:"monitor_name,omitempty"`

	// (Block List, Max: 1) (see below for nested schema)
	MonitorOptions []MonitorOptionsObservation `json:"monitorOptions,omitempty" tf:"monitor_options,omitempty"`

	// (Number)
	MonitorPriority *float64 `json:"monitorPriority,omitempty" tf:"monitor_priority,omitempty"`

	// (Boolean) Prevents saving screenshots of the step.
	// Prevents saving screenshots of the steps.
	NoScreenshot *bool `json:"noScreenshot,omitempty" tf:"no_screenshot,omitempty"`

	// (Set of String) A list of role identifiers pulled from the Roles API to restrict read and write access.
	// A list of role identifiers pulled from the Roles API to restrict read and write access.
	// +listType=set
	RestrictedRoles []*string `json:"restrictedRoles,omitempty" tf:"restricted_roles,omitempty"`

	// (Block List, Max: 1) (see below for nested schema)
	Retry []OptionsListRetryObservation `json:"retry,omitempty" tf:"retry,omitempty"`

	// (Block List, Max: 1) The RUM data collection settings for the Synthetic browser test. (see below for nested schema)
	// The RUM data collection settings for the Synthetic browser test.
	RumSettings []string `json:"rumSettings,omitempty" tf:"rum_settings,omitempty"`

	// (Block List, Max: 1) Object containing timeframes and timezone used for advanced scheduling. (see below for nested schema)
	// Object containing timeframes and timezone used for advanced scheduling.
	Scheduling []SchedulingObservation `json:"scheduling,omitempty" tf:"scheduling,omitempty"`

	// (Number) How often the test should run (in seconds).
	// How often the test should run (in seconds).
	TickEvery *float64 `json:"tickEvery,omitempty" tf:"tick_every,omitempty"`
}

type OptionsListParameters struct {

	// (Boolean) For SSL test, whether or not the test should allow self signed certificates.
	// For SSL test, whether or not the test should allow self signed certificates.
	// +kubebuilder:validation:Optional
	AcceptSelfSigned *bool `json:"acceptSelfSigned,omitempty" tf:"accept_self_signed,omitempty"`

	// (Boolean) Allows loading insecure content for an HTTP request in an API test or in a multistep API test step.
	// Allows loading insecure content for an HTTP request in an API test or in a multistep API test step.
	// +kubebuilder:validation:Optional
	AllowInsecure *bool `json:"allowInsecure,omitempty" tf:"allow_insecure,omitempty"`

	// (Boolean) For SSL test, whether or not the test should fail on revoked certificate in stapled OCSP.
	// For SSL test, whether or not the test should fail on revoked certificate in stapled OCSP.
	// +kubebuilder:validation:Optional
	CheckCertificateRevocation *bool `json:"checkCertificateRevocation,omitempty" tf:"check_certificate_revocation,omitempty"`

	// (Block List, Max: 1) CI/CD options for a Synthetic test. (see below for nested schema)
	// CI/CD options for a Synthetic test.
	// +kubebuilder:validation:Optional
	Ci []CiParameters `json:"ci,omitempty" tf:"ci,omitempty"`

	// Origin Resource Sharing for browser tests.
	// Disable Cross-Origin Resource Sharing for browser tests.
	// +kubebuilder:validation:Optional
	DisableCors *bool `json:"disableCors,omitempty" tf:"disable_cors,omitempty"`

	// (Boolean) Disable Content Security Policy for browser tests.
	// Disable Content Security Policy for browser tests.
	// +kubebuilder:validation:Optional
	DisableCsp *bool `json:"disableCsp,omitempty" tf:"disable_csp,omitempty"`

	// (Boolean) Determines whether or not the API HTTP test should follow redirects.
	// Determines whether or not the API HTTP test should follow redirects.
	// +kubebuilder:validation:Optional
	FollowRedirects *bool `json:"followRedirects,omitempty" tf:"follow_redirects,omitempty"`

	// (String) HTTP version to use for a Synthetics API test. Valid values are http1, http2, any.
	// HTTP version to use for a Synthetics API test. Valid values are `http1`, `http2`, `any`.
	// +kubebuilder:validation:Optional
	HTTPVersion *string `json:"httpVersion,omitempty" tf:"http_version,omitempty"`

	// (Boolean) Ignore server certificate error for browser tests.
	// Ignore server certificate error for browser tests.
	// +kubebuilder:validation:Optional
	IgnoreServerCertificateError *bool `json:"ignoreServerCertificateError,omitempty" tf:"ignore_server_certificate_error,omitempty"`

	// (Number) Timeout before declaring the initial step as failed (in seconds) for browser tests.
	// Timeout before declaring the initial step as failed (in seconds) for browser tests.
	// +kubebuilder:validation:Optional
	InitialNavigationTimeout *float64 `json:"initialNavigationTimeout,omitempty" tf:"initial_navigation_timeout,omitempty"`

	// (Number) Minimum amount of time in failure required to trigger an alert (in seconds). Default is 0.
	// Minimum amount of time in failure required to trigger an alert (in seconds). Default is `0`.
	// +kubebuilder:validation:Optional
	MinFailureDuration *float64 `json:"minFailureDuration,omitempty" tf:"min_failure_duration,omitempty"`

	// (Number) Minimum number of locations in failure required to trigger an alert. Defaults to 1.
	// Minimum number of locations in failure required to trigger an alert. Defaults to `1`.
	// +kubebuilder:validation:Optional
	MinLocationFailed *float64 `json:"minLocationFailed,omitempty" tf:"min_location_failed,omitempty"`

	// (String) The monitor name is used for the alert title as well as for all monitor dashboard widgets and SLOs.
	// The monitor name is used for the alert title as well as for all monitor dashboard widgets and SLOs.
	// +kubebuilder:validation:Optional
	MonitorName *string `json:"monitorName,omitempty" tf:"monitor_name,omitempty"`

	// (Block List, Max: 1) (see below for nested schema)
	// +kubebuilder:validation:Optional
	MonitorOptions []MonitorOptionsParameters `json:"monitorOptions,omitempty" tf:"monitor_options,omitempty"`

	// (Number)
	// +kubebuilder:validation:Optional
	MonitorPriority *float64 `json:"monitorPriority,omitempty" tf:"monitor_priority,omitempty"`

	// (Boolean) Prevents saving screenshots of the step.
	// Prevents saving screenshots of the steps.
	// +kubebuilder:validation:Optional
	NoScreenshot *bool `json:"noScreenshot,omitempty" tf:"no_screenshot,omitempty"`

	// (Set of String) A list of role identifiers pulled from the Roles API to restrict read and write access.
	// A list of role identifiers pulled from the Roles API to restrict read and write access.
	// +kubebuilder:validation:Optional
	// +listType=set
	RestrictedRoles []*string `json:"restrictedRoles,omitempty" tf:"restricted_roles,omitempty"`

	// (Block List, Max: 1) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Retry []OptionsListRetryParameters `json:"retry,omitempty" tf:"retry,omitempty"`

	// (Block List, Max: 1) The RUM data collection settings for the Synthetic browser test. (see below for nested schema)
	// The RUM data collection settings for the Synthetic browser test.
	// +kubebuilder:validation:Optional
	RumSettings []string `json:"rumSettings,omitempty" tf:"rum_settings,omitempty"`

	// (Block List, Max: 1) Object containing timeframes and timezone used for advanced scheduling. (see below for nested schema)
	// Object containing timeframes and timezone used for advanced scheduling.
	// +kubebuilder:validation:Optional
	Scheduling []SchedulingParameters `json:"scheduling,omitempty" tf:"scheduling,omitempty"`

	// (Number) How often the test should run (in seconds).
	// How often the test should run (in seconds).
	// +kubebuilder:validation:Optional
	TickEvery *float64 `json:"tickEvery" tf:"tick_every,omitempty"`
}

type OptionsListRetryInitParameters struct {

	// (Number) Number of retries needed to consider a location as failed before sending a notification alert. Defaults to 0.
	// Number of retries needed to consider a location as failed before sending a notification alert. Defaults to `0`.
	Count *float64 `json:"count,omitempty" tf:"count,omitempty"`

	// (Number) Interval between a failed test and the next retry in milliseconds. Defaults to 300.
	// Interval between a failed test and the next retry in milliseconds. Defaults to `300`.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type OptionsListRetryObservation struct {

	// (Number) Number of retries needed to consider a location as failed before sending a notification alert. Defaults to 0.
	// Number of retries needed to consider a location as failed before sending a notification alert. Defaults to `0`.
	Count *float64 `json:"count,omitempty" tf:"count,omitempty"`

	// (Number) Interval between a failed test and the next retry in milliseconds. Defaults to 300.
	// Interval between a failed test and the next retry in milliseconds. Defaults to `300`.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type OptionsListRetryParameters struct {

	// (Number) Number of retries needed to consider a location as failed before sending a notification alert. Defaults to 0.
	// Number of retries needed to consider a location as failed before sending a notification alert. Defaults to `0`.
	// +kubebuilder:validation:Optional
	Count *float64 `json:"count,omitempty" tf:"count,omitempty"`

	// (Number) Interval between a failed test and the next retry in milliseconds. Defaults to 300.
	// Interval between a failed test and the next retry in milliseconds. Defaults to `300`.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type ParamsInitParameters struct {

	// (String) Name of the attribute to use for an "assert attribute" step.
	// Name of the attribute to use for an "assert attribute" step.
	Attribute *string `json:"attribute,omitempty" tf:"attribute,omitempty"`

	// (String) Check type to use for an assertion step. Valid values are equals, notEquals, contains, notContains, startsWith, notStartsWith, greater, lower, greaterEquals, lowerEquals, matchRegex, between, isEmpty, notIsEmpty.
	// Check type to use for an assertion step. Valid values are `equals`, `notEquals`, `contains`, `notContains`, `startsWith`, `notStartsWith`, `greater`, `lower`, `greaterEquals`, `lowerEquals`, `matchRegex`, `between`, `isEmpty`, `notIsEmpty`.
	Check *string `json:"check,omitempty" tf:"check,omitempty"`

	// (String) Type of click to use for a "click" step.
	// Type of click to use for a "click" step.
	ClickType *string `json:"clickType,omitempty" tf:"click_type,omitempty"`

	// (String) Javascript code to use for the step.
	// Javascript code to use for the step.
	Code *string `json:"code,omitempty" tf:"code,omitempty"`

	// (Number) Delay between each key stroke for a "type test" step.
	// Delay between each key stroke for a "type test" step.
	Delay *float64 `json:"delay,omitempty" tf:"delay,omitempty"`

	// (String) Element to use for the step, json encoded string.
	// Element to use for the step, json encoded string.
	Element *string `json:"element,omitempty" tf:"element,omitempty"`

	// (Block List, Max: 1) Custom user selector to use for the step. (see below for nested schema)
	// Custom user selector to use for the step.
	ElementUserLocator []ElementUserLocatorInitParameters `json:"elementUserLocator,omitempty" tf:"element_user_locator,omitempty"`

	// (String) Details of the email for an "assert email" step.
	// Details of the email for an "assert email" step.
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// (String) JSON encoded string used for an "assert download" step. Refer to the examples for a usage example showing the schema.
	// JSON encoded string used for an "assert download" step. Refer to the examples for a usage example showing the schema.
	File *string `json:"file,omitempty" tf:"file,omitempty"`

	// (String) Details of the files for an "upload files" step, json encoded string.
	// Details of the files for an "upload files" step, json encoded string.
	Files *string `json:"files,omitempty" tf:"files,omitempty"`

	// (List of String) Modifier to use for a "press key" step.
	// Modifier to use for a "press key" step.
	Modifiers []*string `json:"modifiers,omitempty" tf:"modifiers,omitempty"`

	// (String) ID of the tab to play the subtest.
	// ID of the tab to play the subtest.
	PlayingTabID *string `json:"playingTabId,omitempty" tf:"playing_tab_id,omitempty"`

	// (String) Request for an API step.
	// Request for an API step.
	Request *string `json:"request,omitempty" tf:"request,omitempty"`

	// (String) ID of the Synthetics test to use as subtest.
	// ID of the Synthetics test to use as subtest.
	SubtestPublicID *string `json:"subtestPublicId,omitempty" tf:"subtest_public_id,omitempty"`

	// (String) Regex or JSON path used for the parser. Not used with type raw.
	// Value of the step.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`

	// (Block List, Max: 1) Details of the variable to extract. (see below for nested schema)
	// Details of the variable to extract.
	Variable []VariableInitParameters `json:"variable,omitempty" tf:"variable,omitempty"`

	// (Boolean) For "file upload" steps.
	// For "file upload" steps.
	WithClick *bool `json:"withClick,omitempty" tf:"with_click,omitempty"`

	// (Number) X coordinates for a "scroll step".
	// X coordinates for a "scroll step".
	X *float64 `json:"x,omitempty" tf:"x,omitempty"`

	// (Number) Y coordinates for a "scroll step".
	// Y coordinates for a "scroll step".
	Y *float64 `json:"y,omitempty" tf:"y,omitempty"`
}

type ParamsObservation struct {

	// (String) Name of the attribute to use for an "assert attribute" step.
	// Name of the attribute to use for an "assert attribute" step.
	Attribute *string `json:"attribute,omitempty" tf:"attribute,omitempty"`

	// (String) Check type to use for an assertion step. Valid values are equals, notEquals, contains, notContains, startsWith, notStartsWith, greater, lower, greaterEquals, lowerEquals, matchRegex, between, isEmpty, notIsEmpty.
	// Check type to use for an assertion step. Valid values are `equals`, `notEquals`, `contains`, `notContains`, `startsWith`, `notStartsWith`, `greater`, `lower`, `greaterEquals`, `lowerEquals`, `matchRegex`, `between`, `isEmpty`, `notIsEmpty`.
	Check *string `json:"check,omitempty" tf:"check,omitempty"`

	// (String) Type of click to use for a "click" step.
	// Type of click to use for a "click" step.
	ClickType *string `json:"clickType,omitempty" tf:"click_type,omitempty"`

	// (String) Javascript code to use for the step.
	// Javascript code to use for the step.
	Code *string `json:"code,omitempty" tf:"code,omitempty"`

	// (Number) Delay between each key stroke for a "type test" step.
	// Delay between each key stroke for a "type test" step.
	Delay *float64 `json:"delay,omitempty" tf:"delay,omitempty"`

	// (String) Element to use for the step, json encoded string.
	// Element to use for the step, json encoded string.
	Element *string `json:"element,omitempty" tf:"element,omitempty"`

	// (Block List, Max: 1) Custom user selector to use for the step. (see below for nested schema)
	// Custom user selector to use for the step.
	ElementUserLocator []ElementUserLocatorObservation `json:"elementUserLocator,omitempty" tf:"element_user_locator,omitempty"`

	// (String) Details of the email for an "assert email" step.
	// Details of the email for an "assert email" step.
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// (String) JSON encoded string used for an "assert download" step. Refer to the examples for a usage example showing the schema.
	// JSON encoded string used for an "assert download" step. Refer to the examples for a usage example showing the schema.
	File *string `json:"file,omitempty" tf:"file,omitempty"`

	// (String) Details of the files for an "upload files" step, json encoded string.
	// Details of the files for an "upload files" step, json encoded string.
	Files *string `json:"files,omitempty" tf:"files,omitempty"`

	// (List of String) Modifier to use for a "press key" step.
	// Modifier to use for a "press key" step.
	Modifiers []*string `json:"modifiers,omitempty" tf:"modifiers,omitempty"`

	// (String) ID of the tab to play the subtest.
	// ID of the tab to play the subtest.
	PlayingTabID *string `json:"playingTabId,omitempty" tf:"playing_tab_id,omitempty"`

	// (String) Request for an API step.
	// Request for an API step.
	Request *string `json:"request,omitempty" tf:"request,omitempty"`

	// (String) ID of the Synthetics test to use as subtest.
	// ID of the Synthetics test to use as subtest.
	SubtestPublicID *string `json:"subtestPublicId,omitempty" tf:"subtest_public_id,omitempty"`

	// (String) Regex or JSON path used for the parser. Not used with type raw.
	// Value of the step.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`

	// (Block List, Max: 1) Details of the variable to extract. (see below for nested schema)
	// Details of the variable to extract.
	Variable []VariableObservation `json:"variable,omitempty" tf:"variable,omitempty"`

	// (Boolean) For "file upload" steps.
	// For "file upload" steps.
	WithClick *bool `json:"withClick,omitempty" tf:"with_click,omitempty"`

	// (Number) X coordinates for a "scroll step".
	// X coordinates for a "scroll step".
	X *float64 `json:"x,omitempty" tf:"x,omitempty"`

	// (Number) Y coordinates for a "scroll step".
	// Y coordinates for a "scroll step".
	Y *float64 `json:"y,omitempty" tf:"y,omitempty"`
}

type ParamsParameters struct {

	// (String) Name of the attribute to use for an "assert attribute" step.
	// Name of the attribute to use for an "assert attribute" step.
	// +kubebuilder:validation:Optional
	Attribute *string `json:"attribute,omitempty" tf:"attribute,omitempty"`

	// (String) Check type to use for an assertion step. Valid values are equals, notEquals, contains, notContains, startsWith, notStartsWith, greater, lower, greaterEquals, lowerEquals, matchRegex, between, isEmpty, notIsEmpty.
	// Check type to use for an assertion step. Valid values are `equals`, `notEquals`, `contains`, `notContains`, `startsWith`, `notStartsWith`, `greater`, `lower`, `greaterEquals`, `lowerEquals`, `matchRegex`, `between`, `isEmpty`, `notIsEmpty`.
	// +kubebuilder:validation:Optional
	Check *string `json:"check,omitempty" tf:"check,omitempty"`

	// (String) Type of click to use for a "click" step.
	// Type of click to use for a "click" step.
	// +kubebuilder:validation:Optional
	ClickType *string `json:"clickType,omitempty" tf:"click_type,omitempty"`

	// (String) Javascript code to use for the step.
	// Javascript code to use for the step.
	// +kubebuilder:validation:Optional
	Code *string `json:"code,omitempty" tf:"code,omitempty"`

	// (Number) Delay between each key stroke for a "type test" step.
	// Delay between each key stroke for a "type test" step.
	// +kubebuilder:validation:Optional
	Delay *float64 `json:"delay,omitempty" tf:"delay,omitempty"`

	// (String) Element to use for the step, json encoded string.
	// Element to use for the step, json encoded string.
	// +kubebuilder:validation:Optional
	Element *string `json:"element,omitempty" tf:"element,omitempty"`

	// (Block List, Max: 1) Custom user selector to use for the step. (see below for nested schema)
	// Custom user selector to use for the step.
	// +kubebuilder:validation:Optional
	ElementUserLocator []ElementUserLocatorParameters `json:"elementUserLocator,omitempty" tf:"element_user_locator,omitempty"`

	// (String) Details of the email for an "assert email" step.
	// Details of the email for an "assert email" step.
	// +kubebuilder:validation:Optional
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// (String) JSON encoded string used for an "assert download" step. Refer to the examples for a usage example showing the schema.
	// JSON encoded string used for an "assert download" step. Refer to the examples for a usage example showing the schema.
	// +kubebuilder:validation:Optional
	File *string `json:"file,omitempty" tf:"file,omitempty"`

	// (String) Details of the files for an "upload files" step, json encoded string.
	// Details of the files for an "upload files" step, json encoded string.
	// +kubebuilder:validation:Optional
	Files *string `json:"files,omitempty" tf:"files,omitempty"`

	// (List of String) Modifier to use for a "press key" step.
	// Modifier to use for a "press key" step.
	// +kubebuilder:validation:Optional
	Modifiers []*string `json:"modifiers,omitempty" tf:"modifiers,omitempty"`

	// (String) ID of the tab to play the subtest.
	// ID of the tab to play the subtest.
	// +kubebuilder:validation:Optional
	PlayingTabID *string `json:"playingTabId,omitempty" tf:"playing_tab_id,omitempty"`

	// (String) Request for an API step.
	// Request for an API step.
	// +kubebuilder:validation:Optional
	Request *string `json:"request,omitempty" tf:"request,omitempty"`

	// (String) ID of the Synthetics test to use as subtest.
	// ID of the Synthetics test to use as subtest.
	// +kubebuilder:validation:Optional
	SubtestPublicID *string `json:"subtestPublicId,omitempty" tf:"subtest_public_id,omitempty"`

	// (String) Regex or JSON path used for the parser. Not used with type raw.
	// Value of the step.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`

	// (Block List, Max: 1) Details of the variable to extract. (see below for nested schema)
	// Details of the variable to extract.
	// +kubebuilder:validation:Optional
	Variable []VariableParameters `json:"variable,omitempty" tf:"variable,omitempty"`

	// (Boolean) For "file upload" steps.
	// For "file upload" steps.
	// +kubebuilder:validation:Optional
	WithClick *bool `json:"withClick,omitempty" tf:"with_click,omitempty"`

	// (Number) X coordinates for a "scroll step".
	// X coordinates for a "scroll step".
	// +kubebuilder:validation:Optional
	X *float64 `json:"x,omitempty" tf:"x,omitempty"`

	// (Number) Y coordinates for a "scroll step".
	// Y coordinates for a "scroll step".
	// +kubebuilder:validation:Optional
	Y *float64 `json:"y,omitempty" tf:"y,omitempty"`
}

type RequestBasicauthInitParameters struct {

	// client or oauth-rop authentication.
	// Access token url for `oauth-client` or `oauth-rop` authentication.
	AccessTokenURL *string `json:"accessTokenUrl,omitempty" tf:"access_token_url,omitempty"`

	// client or oauth-rop authentication. Defaults to "".
	// Audience for `oauth-client` or `oauth-rop` authentication. Defaults to `""`.
	Audience *string `json:"audience,omitempty" tf:"audience,omitempty"`

	// client or oauth-rop authentication.
	// Client ID for `oauth-client` or `oauth-rop` authentication.
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// (String) Domain for ntlm authentication.
	// Domain for `ntlm` authentication.
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// (String) Region for SIGV4 authentication.
	// Region for `SIGV4` authentication.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// client or oauth-rop authentication. Defaults to "".
	// Resource for `oauth-client` or `oauth-rop` authentication. Defaults to `""`.
	Resource *string `json:"resource,omitempty" tf:"resource,omitempty"`

	// client or oauth-rop authentication. Defaults to "".
	// Scope for `oauth-client` or `oauth-rop` authentication. Defaults to `""`.
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// (String) Service name for SIGV4 authentication.
	// Service name for `SIGV4` authentication.
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// (String) Session token for SIGV4 authentication.
	// Session token for `SIGV4` authentication.
	SessionToken *string `json:"sessionToken,omitempty" tf:"session_token,omitempty"`

	// client or oauth-rop authentication. Valid values are header, body.
	// Token API Authentication for `oauth-client` or `oauth-rop` authentication. Valid values are `header`, `body`.
	TokenAPIAuthentication *string `json:"tokenApiAuthentication,omitempty" tf:"token_api_authentication,omitempty"`

	// (String) Synthetics test type. Valid values are api, browser.
	// Type of basic authentication to use when performing the test. Defaults to `"web"`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) Username for authentication.
	// Username for authentication.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`

	// (String) Workstation for ntlm authentication.
	// Workstation for `ntlm` authentication.
	Workstation *string `json:"workstation,omitempty" tf:"workstation,omitempty"`
}

type RequestBasicauthObservation struct {

	// client or oauth-rop authentication.
	// Access token url for `oauth-client` or `oauth-rop` authentication.
	AccessTokenURL *string `json:"accessTokenUrl,omitempty" tf:"access_token_url,omitempty"`

	// client or oauth-rop authentication. Defaults to "".
	// Audience for `oauth-client` or `oauth-rop` authentication. Defaults to `""`.
	Audience *string `json:"audience,omitempty" tf:"audience,omitempty"`

	// client or oauth-rop authentication.
	// Client ID for `oauth-client` or `oauth-rop` authentication.
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// (String) Domain for ntlm authentication.
	// Domain for `ntlm` authentication.
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// (String) Region for SIGV4 authentication.
	// Region for `SIGV4` authentication.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// client or oauth-rop authentication. Defaults to "".
	// Resource for `oauth-client` or `oauth-rop` authentication. Defaults to `""`.
	Resource *string `json:"resource,omitempty" tf:"resource,omitempty"`

	// client or oauth-rop authentication. Defaults to "".
	// Scope for `oauth-client` or `oauth-rop` authentication. Defaults to `""`.
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// (String) Service name for SIGV4 authentication.
	// Service name for `SIGV4` authentication.
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// (String) Session token for SIGV4 authentication.
	// Session token for `SIGV4` authentication.
	SessionToken *string `json:"sessionToken,omitempty" tf:"session_token,omitempty"`

	// client or oauth-rop authentication. Valid values are header, body.
	// Token API Authentication for `oauth-client` or `oauth-rop` authentication. Valid values are `header`, `body`.
	TokenAPIAuthentication *string `json:"tokenApiAuthentication,omitempty" tf:"token_api_authentication,omitempty"`

	// (String) Synthetics test type. Valid values are api, browser.
	// Type of basic authentication to use when performing the test. Defaults to `"web"`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) Username for authentication.
	// Username for authentication.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`

	// (String) Workstation for ntlm authentication.
	// Workstation for `ntlm` authentication.
	Workstation *string `json:"workstation,omitempty" tf:"workstation,omitempty"`
}

type RequestBasicauthParameters struct {

	// (String, Sensitive) Access key for SIGV4 authentication.
	// Access key for `SIGV4` authentication.
	// +kubebuilder:validation:Optional
	AccessKeySecretRef *v1.SecretKeySelector `json:"accessKeySecretRef,omitempty" tf:"-"`

	// client or oauth-rop authentication.
	// Access token url for `oauth-client` or `oauth-rop` authentication.
	// +kubebuilder:validation:Optional
	AccessTokenURL *string `json:"accessTokenUrl,omitempty" tf:"access_token_url,omitempty"`

	// client or oauth-rop authentication. Defaults to "".
	// Audience for `oauth-client` or `oauth-rop` authentication. Defaults to `""`.
	// +kubebuilder:validation:Optional
	Audience *string `json:"audience,omitempty" tf:"audience,omitempty"`

	// client or oauth-rop authentication.
	// Client ID for `oauth-client` or `oauth-rop` authentication.
	// +kubebuilder:validation:Optional
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// client or oauth-rop authentication.
	// Client secret for `oauth-client` or `oauth-rop` authentication.
	// +kubebuilder:validation:Optional
	ClientSecretSecretRef *v1.SecretKeySelector `json:"clientSecretSecretRef,omitempty" tf:"-"`

	// (String) Domain for ntlm authentication.
	// Domain for `ntlm` authentication.
	// +kubebuilder:validation:Optional
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// (String, Sensitive) Password for authentication.
	// Password for authentication.
	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// (String) Region for SIGV4 authentication.
	// Region for `SIGV4` authentication.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// client or oauth-rop authentication. Defaults to "".
	// Resource for `oauth-client` or `oauth-rop` authentication. Defaults to `""`.
	// +kubebuilder:validation:Optional
	Resource *string `json:"resource,omitempty" tf:"resource,omitempty"`

	// client or oauth-rop authentication. Defaults to "".
	// Scope for `oauth-client` or `oauth-rop` authentication. Defaults to `""`.
	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// (String, Sensitive) Secret key for SIGV4 authentication.
	// Secret key for `SIGV4` authentication.
	// +kubebuilder:validation:Optional
	SecretKeySecretRef *v1.SecretKeySelector `json:"secretKeySecretRef,omitempty" tf:"-"`

	// (String) Service name for SIGV4 authentication.
	// Service name for `SIGV4` authentication.
	// +kubebuilder:validation:Optional
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// (String) Session token for SIGV4 authentication.
	// Session token for `SIGV4` authentication.
	// +kubebuilder:validation:Optional
	SessionToken *string `json:"sessionToken,omitempty" tf:"session_token,omitempty"`

	// client or oauth-rop authentication. Valid values are header, body.
	// Token API Authentication for `oauth-client` or `oauth-rop` authentication. Valid values are `header`, `body`.
	// +kubebuilder:validation:Optional
	TokenAPIAuthentication *string `json:"tokenApiAuthentication,omitempty" tf:"token_api_authentication,omitempty"`

	// (String) Synthetics test type. Valid values are api, browser.
	// Type of basic authentication to use when performing the test. Defaults to `"web"`.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) Username for authentication.
	// Username for authentication.
	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`

	// (String) Workstation for ntlm authentication.
	// Workstation for `ntlm` authentication.
	// +kubebuilder:validation:Optional
	Workstation *string `json:"workstation,omitempty" tf:"workstation,omitempty"`
}

type RequestClientCertificateCertInitParameters struct {

	// (String) File name for the certificate.
	// File name for the certificate.
	Filename *string `json:"filename,omitempty" tf:"filename,omitempty"`
}

type RequestClientCertificateCertObservation struct {

	// (String) File name for the certificate.
	// File name for the certificate.
	Filename *string `json:"filename,omitempty" tf:"filename,omitempty"`
}

type RequestClientCertificateCertParameters struct {

	// (String, Sensitive) Content of the certificate.
	// Content of the certificate.
	// +kubebuilder:validation:Required
	ContentSecretRef v1.SecretKeySelector `json:"contentSecretRef" tf:"-"`

	// (String) File name for the certificate.
	// File name for the certificate.
	// +kubebuilder:validation:Optional
	Filename *string `json:"filename,omitempty" tf:"filename,omitempty"`
}

type RequestClientCertificateInitParameters struct {

	// (Block List, Min: 1, Max: 1) (see below for nested schema)
	Cert []CertInitParameters `json:"cert,omitempty" tf:"cert,omitempty"`

	// (Block List, Min: 1, Max: 1) (see below for nested schema)
	Key []KeyInitParameters `json:"key,omitempty" tf:"key,omitempty"`
}

type RequestClientCertificateKeyInitParameters struct {

	// (String) File name for the certificate.
	// File name for the certificate.
	Filename *string `json:"filename,omitempty" tf:"filename,omitempty"`
}

type RequestClientCertificateKeyObservation struct {

	// (String) File name for the certificate.
	// File name for the certificate.
	Filename *string `json:"filename,omitempty" tf:"filename,omitempty"`
}

type RequestClientCertificateKeyParameters struct {

	// (String, Sensitive) Content of the certificate.
	// Content of the certificate.
	// +kubebuilder:validation:Required
	ContentSecretRef v1.SecretKeySelector `json:"contentSecretRef" tf:"-"`

	// (String) File name for the certificate.
	// File name for the certificate.
	// +kubebuilder:validation:Optional
	Filename *string `json:"filename,omitempty" tf:"filename,omitempty"`
}

type RequestClientCertificateObservation struct {

	// (Block List, Min: 1, Max: 1) (see below for nested schema)
	Cert []CertObservation `json:"cert,omitempty" tf:"cert,omitempty"`

	// (Block List, Min: 1, Max: 1) (see below for nested schema)
	Key []KeyObservation `json:"key,omitempty" tf:"key,omitempty"`
}

type RequestClientCertificateParameters struct {

	// (Block List, Min: 1, Max: 1) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Cert []CertParameters `json:"cert" tf:"cert,omitempty"`

	// (Block List, Min: 1, Max: 1) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Key []KeyParameters `json:"key" tf:"key,omitempty"`
}

type RequestDefinitionInitParameters struct {

	// (Boolean) Allows loading insecure content for an HTTP request in an API test or in a multistep API test step.
	// Allows loading insecure content for an HTTP request in an API test or in a multistep API test step.
	AllowInsecure *bool `json:"allowInsecure,omitempty" tf:"allow_insecure,omitempty"`

	// (String) The request body.
	// The request body.
	Body *string `json:"body,omitempty" tf:"body,omitempty"`

	// www-form-urlencoded, graphql.
	// Type of the request body. Valid values are `text/plain`, `application/json`, `text/xml`, `text/html`, `application/x-www-form-urlencoded`, `graphql`.
	BodyType *string `json:"bodyType,omitempty" tf:"body_type,omitempty"`

	// (String) The type of gRPC call to perform. Valid values are healthcheck, unary.
	// The type of gRPC call to perform. Valid values are `healthcheck`, `unary`.
	CallType *string `json:"callType,omitempty" tf:"call_type,omitempty"`

	// (List of String) By default, the client certificate is applied on the domain of the starting URL for browser tests. If you want your client certificate to be applied on other domains instead, add them in certificate_domains.
	// By default, the client certificate is applied on the domain of the starting URL for browser tests. If you want your client certificate to be applied on other domains instead, add them in `certificate_domains`.
	CertificateDomains []*string `json:"certificateDomains,omitempty" tf:"certificate_domains,omitempty"`

	// (String) DNS server to use for DNS tests (subtype = "dns").
	// DNS server to use for DNS tests (`subtype = "dns"`).
	DNSServer *string `json:"dnsServer,omitempty" tf:"dns_server,omitempty"`

	// (Number) DNS server port to use for DNS tests.
	// DNS server port to use for DNS tests.
	DNSServerPort *float64 `json:"dnsServerPort,omitempty" tf:"dns_server_port,omitempty"`

	// (Boolean) Determines whether or not the API HTTP test should follow redirects.
	// Determines whether or not the API HTTP test should follow redirects.
	FollowRedirects *bool `json:"followRedirects,omitempty" tf:"follow_redirects,omitempty"`

	// (String) Host name to perform the test with.
	// Host name to perform the test with.
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// (String) A message to include with notifications for this synthetics test. Email notifications can be sent to specific users by using the same @username notation as events. Defaults to "".
	// For UDP and websocket tests, message to send with the request.
	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	// (String) Either the HTTP method/verb to use or a gRPC method available on the service set in the service field. Required if subtype is HTTP or if subtype is grpc and callType is unary.
	// Either the HTTP method/verb to use or a gRPC method available on the service set in the `service` field. Required if `subtype` is `HTTP` or if `subtype` is `grpc` and `callType` is `unary`.
	Method *string `json:"method,omitempty" tf:"method,omitempty"`

	// (Boolean) Determines whether or not to save the response body.
	// Determines whether or not to save the response body.
	NoSavingResponseBody *bool `json:"noSavingResponseBody,omitempty" tf:"no_saving_response_body,omitempty"`

	// (Number) Number of pings to use per test for ICMP tests (subtype = "icmp") between 0 and 10.
	// Number of pings to use per test for ICMP tests (`subtype = "icmp"`) between 0 and 10.
	NumberOfPackets *float64 `json:"numberOfPackets,omitempty" tf:"number_of_packets,omitempty"`

	// (Boolean) Persist cookies across redirects.
	// Persist cookies across redirects.
	PersistCookies *bool `json:"persistCookies,omitempty" tf:"persist_cookies,omitempty"`

	// (String) The content of a proto file as a string.
	// The content of a proto file as a string.
	PlainProtoFile *string `json:"plainProtoFile,omitempty" tf:"plain_proto_file,omitempty"`

	// (Number) Port to use when performing the test.
	// Port to use when performing the test.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// (String, Deprecated) A protobuf JSON descriptor. Deprecated. Use plain_proto_file instead.
	// A protobuf JSON descriptor. **Deprecated.** Use `plain_proto_file` instead.
	ProtoJSONDescriptor *string `json:"protoJsonDescriptor,omitempty" tf:"proto_json_descriptor,omitempty"`

	// (String) For SSL tests, it specifies on which server you want to initiate the TLS handshake, allowing the server to present one of multiple possible certificates on the same IP address and TCP port number.
	// For SSL tests, it specifies on which server you want to initiate the TLS handshake, allowing the server to present one of multiple possible certificates on the same IP address and TCP port number.
	Servername *string `json:"servername,omitempty" tf:"servername,omitempty"`

	// (String) The gRPC service on which you want to perform the gRPC call.
	// The gRPC service on which you want to perform the gRPC call.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`

	// (Boolean) This will turn on a traceroute probe to discover all gateways along the path to the host destination. For ICMP tests (subtype = "icmp").
	// This will turn on a traceroute probe to discover all gateways along the path to the host destination. For ICMP tests (`subtype = "icmp"`).
	ShouldTrackHops *bool `json:"shouldTrackHops,omitempty" tf:"should_track_hops,omitempty"`

	// (Number) Timeout in seconds for the test. Defaults to 60.
	// Timeout in seconds for the test. Defaults to `60`.
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// (String) The URL to send the request to.
	// The URL to send the request to.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type RequestDefinitionObservation struct {

	// (Boolean) Allows loading insecure content for an HTTP request in an API test or in a multistep API test step.
	// Allows loading insecure content for an HTTP request in an API test or in a multistep API test step.
	AllowInsecure *bool `json:"allowInsecure,omitempty" tf:"allow_insecure,omitempty"`

	// (String) The request body.
	// The request body.
	Body *string `json:"body,omitempty" tf:"body,omitempty"`

	// www-form-urlencoded, graphql.
	// Type of the request body. Valid values are `text/plain`, `application/json`, `text/xml`, `text/html`, `application/x-www-form-urlencoded`, `graphql`.
	BodyType *string `json:"bodyType,omitempty" tf:"body_type,omitempty"`

	// (String) The type of gRPC call to perform. Valid values are healthcheck, unary.
	// The type of gRPC call to perform. Valid values are `healthcheck`, `unary`.
	CallType *string `json:"callType,omitempty" tf:"call_type,omitempty"`

	// (List of String) By default, the client certificate is applied on the domain of the starting URL for browser tests. If you want your client certificate to be applied on other domains instead, add them in certificate_domains.
	// By default, the client certificate is applied on the domain of the starting URL for browser tests. If you want your client certificate to be applied on other domains instead, add them in `certificate_domains`.
	CertificateDomains []*string `json:"certificateDomains,omitempty" tf:"certificate_domains,omitempty"`

	// (String) DNS server to use for DNS tests (subtype = "dns").
	// DNS server to use for DNS tests (`subtype = "dns"`).
	DNSServer *string `json:"dnsServer,omitempty" tf:"dns_server,omitempty"`

	// (Number) DNS server port to use for DNS tests.
	// DNS server port to use for DNS tests.
	DNSServerPort *float64 `json:"dnsServerPort,omitempty" tf:"dns_server_port,omitempty"`

	// (Boolean) Determines whether or not the API HTTP test should follow redirects.
	// Determines whether or not the API HTTP test should follow redirects.
	FollowRedirects *bool `json:"followRedirects,omitempty" tf:"follow_redirects,omitempty"`

	// (String) Host name to perform the test with.
	// Host name to perform the test with.
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// (String) A message to include with notifications for this synthetics test. Email notifications can be sent to specific users by using the same @username notation as events. Defaults to "".
	// For UDP and websocket tests, message to send with the request.
	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	// (String) Either the HTTP method/verb to use or a gRPC method available on the service set in the service field. Required if subtype is HTTP or if subtype is grpc and callType is unary.
	// Either the HTTP method/verb to use or a gRPC method available on the service set in the `service` field. Required if `subtype` is `HTTP` or if `subtype` is `grpc` and `callType` is `unary`.
	Method *string `json:"method,omitempty" tf:"method,omitempty"`

	// (Boolean) Determines whether or not to save the response body.
	// Determines whether or not to save the response body.
	NoSavingResponseBody *bool `json:"noSavingResponseBody,omitempty" tf:"no_saving_response_body,omitempty"`

	// (Number) Number of pings to use per test for ICMP tests (subtype = "icmp") between 0 and 10.
	// Number of pings to use per test for ICMP tests (`subtype = "icmp"`) between 0 and 10.
	NumberOfPackets *float64 `json:"numberOfPackets,omitempty" tf:"number_of_packets,omitempty"`

	// (Boolean) Persist cookies across redirects.
	// Persist cookies across redirects.
	PersistCookies *bool `json:"persistCookies,omitempty" tf:"persist_cookies,omitempty"`

	// (String) The content of a proto file as a string.
	// The content of a proto file as a string.
	PlainProtoFile *string `json:"plainProtoFile,omitempty" tf:"plain_proto_file,omitempty"`

	// (Number) Port to use when performing the test.
	// Port to use when performing the test.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// (String, Deprecated) A protobuf JSON descriptor. Deprecated. Use plain_proto_file instead.
	// A protobuf JSON descriptor. **Deprecated.** Use `plain_proto_file` instead.
	ProtoJSONDescriptor *string `json:"protoJsonDescriptor,omitempty" tf:"proto_json_descriptor,omitempty"`

	// (String) For SSL tests, it specifies on which server you want to initiate the TLS handshake, allowing the server to present one of multiple possible certificates on the same IP address and TCP port number.
	// For SSL tests, it specifies on which server you want to initiate the TLS handshake, allowing the server to present one of multiple possible certificates on the same IP address and TCP port number.
	Servername *string `json:"servername,omitempty" tf:"servername,omitempty"`

	// (String) The gRPC service on which you want to perform the gRPC call.
	// The gRPC service on which you want to perform the gRPC call.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`

	// (Boolean) This will turn on a traceroute probe to discover all gateways along the path to the host destination. For ICMP tests (subtype = "icmp").
	// This will turn on a traceroute probe to discover all gateways along the path to the host destination. For ICMP tests (`subtype = "icmp"`).
	ShouldTrackHops *bool `json:"shouldTrackHops,omitempty" tf:"should_track_hops,omitempty"`

	// (Number) Timeout in seconds for the test. Defaults to 60.
	// Timeout in seconds for the test. Defaults to `60`.
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// (String) The URL to send the request to.
	// The URL to send the request to.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type RequestDefinitionParameters struct {

	// (Boolean) Allows loading insecure content for an HTTP request in an API test or in a multistep API test step.
	// Allows loading insecure content for an HTTP request in an API test or in a multistep API test step.
	// +kubebuilder:validation:Optional
	AllowInsecure *bool `json:"allowInsecure,omitempty" tf:"allow_insecure,omitempty"`

	// (String) The request body.
	// The request body.
	// +kubebuilder:validation:Optional
	Body *string `json:"body,omitempty" tf:"body,omitempty"`

	// www-form-urlencoded, graphql.
	// Type of the request body. Valid values are `text/plain`, `application/json`, `text/xml`, `text/html`, `application/x-www-form-urlencoded`, `graphql`.
	// +kubebuilder:validation:Optional
	BodyType *string `json:"bodyType,omitempty" tf:"body_type,omitempty"`

	// (String) The type of gRPC call to perform. Valid values are healthcheck, unary.
	// The type of gRPC call to perform. Valid values are `healthcheck`, `unary`.
	// +kubebuilder:validation:Optional
	CallType *string `json:"callType,omitempty" tf:"call_type,omitempty"`

	// (List of String) By default, the client certificate is applied on the domain of the starting URL for browser tests. If you want your client certificate to be applied on other domains instead, add them in certificate_domains.
	// By default, the client certificate is applied on the domain of the starting URL for browser tests. If you want your client certificate to be applied on other domains instead, add them in `certificate_domains`.
	// +kubebuilder:validation:Optional
	CertificateDomains []*string `json:"certificateDomains,omitempty" tf:"certificate_domains,omitempty"`

	// (String) DNS server to use for DNS tests (subtype = "dns").
	// DNS server to use for DNS tests (`subtype = "dns"`).
	// +kubebuilder:validation:Optional
	DNSServer *string `json:"dnsServer,omitempty" tf:"dns_server,omitempty"`

	// (Number) DNS server port to use for DNS tests.
	// DNS server port to use for DNS tests.
	// +kubebuilder:validation:Optional
	DNSServerPort *float64 `json:"dnsServerPort,omitempty" tf:"dns_server_port,omitempty"`

	// (Boolean) Determines whether or not the API HTTP test should follow redirects.
	// Determines whether or not the API HTTP test should follow redirects.
	// +kubebuilder:validation:Optional
	FollowRedirects *bool `json:"followRedirects,omitempty" tf:"follow_redirects,omitempty"`

	// (String) Host name to perform the test with.
	// Host name to perform the test with.
	// +kubebuilder:validation:Optional
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// (String) A message to include with notifications for this synthetics test. Email notifications can be sent to specific users by using the same @username notation as events. Defaults to "".
	// For UDP and websocket tests, message to send with the request.
	// +kubebuilder:validation:Optional
	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	// (String) Either the HTTP method/verb to use or a gRPC method available on the service set in the service field. Required if subtype is HTTP or if subtype is grpc and callType is unary.
	// Either the HTTP method/verb to use or a gRPC method available on the service set in the `service` field. Required if `subtype` is `HTTP` or if `subtype` is `grpc` and `callType` is `unary`.
	// +kubebuilder:validation:Optional
	Method *string `json:"method,omitempty" tf:"method,omitempty"`

	// (Boolean) Determines whether or not to save the response body.
	// Determines whether or not to save the response body.
	// +kubebuilder:validation:Optional
	NoSavingResponseBody *bool `json:"noSavingResponseBody,omitempty" tf:"no_saving_response_body,omitempty"`

	// (Number) Number of pings to use per test for ICMP tests (subtype = "icmp") between 0 and 10.
	// Number of pings to use per test for ICMP tests (`subtype = "icmp"`) between 0 and 10.
	// +kubebuilder:validation:Optional
	NumberOfPackets *float64 `json:"numberOfPackets,omitempty" tf:"number_of_packets,omitempty"`

	// (Boolean) Persist cookies across redirects.
	// Persist cookies across redirects.
	// +kubebuilder:validation:Optional
	PersistCookies *bool `json:"persistCookies,omitempty" tf:"persist_cookies,omitempty"`

	// (String) The content of a proto file as a string.
	// The content of a proto file as a string.
	// +kubebuilder:validation:Optional
	PlainProtoFile *string `json:"plainProtoFile,omitempty" tf:"plain_proto_file,omitempty"`

	// (Number) Port to use when performing the test.
	// Port to use when performing the test.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// (String, Deprecated) A protobuf JSON descriptor. Deprecated. Use plain_proto_file instead.
	// A protobuf JSON descriptor. **Deprecated.** Use `plain_proto_file` instead.
	// +kubebuilder:validation:Optional
	ProtoJSONDescriptor *string `json:"protoJsonDescriptor,omitempty" tf:"proto_json_descriptor,omitempty"`

	// (String) For SSL tests, it specifies on which server you want to initiate the TLS handshake, allowing the server to present one of multiple possible certificates on the same IP address and TCP port number.
	// For SSL tests, it specifies on which server you want to initiate the TLS handshake, allowing the server to present one of multiple possible certificates on the same IP address and TCP port number.
	// +kubebuilder:validation:Optional
	Servername *string `json:"servername,omitempty" tf:"servername,omitempty"`

	// (String) The gRPC service on which you want to perform the gRPC call.
	// The gRPC service on which you want to perform the gRPC call.
	// +kubebuilder:validation:Optional
	Service *string `json:"service,omitempty" tf:"service,omitempty"`

	// (Boolean) This will turn on a traceroute probe to discover all gateways along the path to the host destination. For ICMP tests (subtype = "icmp").
	// This will turn on a traceroute probe to discover all gateways along the path to the host destination. For ICMP tests (`subtype = "icmp"`).
	// +kubebuilder:validation:Optional
	ShouldTrackHops *bool `json:"shouldTrackHops,omitempty" tf:"should_track_hops,omitempty"`

	// (Number) Timeout in seconds for the test. Defaults to 60.
	// Timeout in seconds for the test. Defaults to `60`.
	// +kubebuilder:validation:Optional
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// (String) The URL to send the request to.
	// The URL to send the request to.
	// +kubebuilder:validation:Optional
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type RequestProxyInitParameters struct {

	// (Map of String) Header name and value map.
	// Header name and value map.
	// +mapType=granular
	Headers map[string]*string `json:"headers,omitempty" tf:"headers,omitempty"`

	// (String) The URL to send the request to.
	// URL of the proxy to perform the test.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type RequestProxyObservation struct {

	// (Map of String) Header name and value map.
	// Header name and value map.
	// +mapType=granular
	Headers map[string]*string `json:"headers,omitempty" tf:"headers,omitempty"`

	// (String) The URL to send the request to.
	// URL of the proxy to perform the test.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type RequestProxyParameters struct {

	// (Map of String) Header name and value map.
	// Header name and value map.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Headers map[string]*string `json:"headers,omitempty" tf:"headers,omitempty"`

	// (String) The URL to send the request to.
	// URL of the proxy to perform the test.
	// +kubebuilder:validation:Optional
	URL *string `json:"url" tf:"url,omitempty"`
}

type RetryInitParameters struct {

	// (Number) Number of retries needed to consider a location as failed before sending a notification alert. Defaults to 0.
	// Number of retries needed to consider a location as failed before sending a notification alert. Defaults to `0`.
	Count *float64 `json:"count,omitempty" tf:"count,omitempty"`

	// (Number) Interval between a failed test and the next retry in milliseconds. Defaults to 300.
	// Interval between a failed test and the next retry in milliseconds. Defaults to `300`.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RetryObservation struct {

	// (Number) Number of retries needed to consider a location as failed before sending a notification alert. Defaults to 0.
	// Number of retries needed to consider a location as failed before sending a notification alert. Defaults to `0`.
	Count *float64 `json:"count,omitempty" tf:"count,omitempty"`

	// (Number) Interval between a failed test and the next retry in milliseconds. Defaults to 300.
	// Interval between a failed test and the next retry in milliseconds. Defaults to `300`.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RetryParameters struct {

	// (Number) Number of retries needed to consider a location as failed before sending a notification alert. Defaults to 0.
	// Number of retries needed to consider a location as failed before sending a notification alert. Defaults to `0`.
	// +kubebuilder:validation:Optional
	Count *float64 `json:"count,omitempty" tf:"count,omitempty"`

	// (Number) Interval between a failed test and the next retry in milliseconds. Defaults to 300.
	// Interval between a failed test and the next retry in milliseconds. Defaults to `300`.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type SchedulingInitParameters struct {

	// (Block Set, Min: 1) Array containing objects describing the scheduling pattern to apply to each day. (see below for nested schema)
	// Array containing objects describing the scheduling pattern to apply to each day.
	Timeframes []TimeframesInitParameters `json:"timeframes,omitempty" tf:"timeframes,omitempty"`

	// (String) Timezone in which the timeframe is based.
	// Timezone in which the timeframe is based.
	Timezone *string `json:"timezone,omitempty" tf:"timezone,omitempty"`
}

type SchedulingObservation struct {

	// (Block Set, Min: 1) Array containing objects describing the scheduling pattern to apply to each day. (see below for nested schema)
	// Array containing objects describing the scheduling pattern to apply to each day.
	Timeframes []TimeframesObservation `json:"timeframes,omitempty" tf:"timeframes,omitempty"`

	// (String) Timezone in which the timeframe is based.
	// Timezone in which the timeframe is based.
	Timezone *string `json:"timezone,omitempty" tf:"timezone,omitempty"`
}

type SchedulingParameters struct {

	// (Block Set, Min: 1) Array containing objects describing the scheduling pattern to apply to each day. (see below for nested schema)
	// Array containing objects describing the scheduling pattern to apply to each day.
	// +kubebuilder:validation:Optional
	Timeframes []TimeframesParameters `json:"timeframes" tf:"timeframes,omitempty"`

	// (String) Timezone in which the timeframe is based.
	// Timezone in which the timeframe is based.
	// +kubebuilder:validation:Optional
	Timezone *string `json:"timezone" tf:"timezone,omitempty"`
}

type TargetjsonpathInitParameters struct {

	// (String) The JSON path to assert.
	// The JSON path to assert.
	Jsonpath *string `json:"jsonpath,omitempty" tf:"jsonpath,omitempty"`

	// (String) Assertion operator. Note Only some combinations of type and operator are valid (please refer to Datadog documentation).
	// The specific operator to use on the path.
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) Expected matching value.
	// Expected matching value.
	Targetvalue *string `json:"targetvalue,omitempty" tf:"targetvalue,omitempty"`
}

type TargetjsonpathObservation struct {

	// (String) The JSON path to assert.
	// The JSON path to assert.
	Jsonpath *string `json:"jsonpath,omitempty" tf:"jsonpath,omitempty"`

	// (String) Assertion operator. Note Only some combinations of type and operator are valid (please refer to Datadog documentation).
	// The specific operator to use on the path.
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) Expected matching value.
	// Expected matching value.
	Targetvalue *string `json:"targetvalue,omitempty" tf:"targetvalue,omitempty"`
}

type TargetjsonpathParameters struct {

	// (String) The JSON path to assert.
	// The JSON path to assert.
	// +kubebuilder:validation:Optional
	Jsonpath *string `json:"jsonpath" tf:"jsonpath,omitempty"`

	// (String) Assertion operator. Note Only some combinations of type and operator are valid (please refer to Datadog documentation).
	// The specific operator to use on the path.
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) Expected matching value.
	// Expected matching value.
	// +kubebuilder:validation:Optional
	Targetvalue *string `json:"targetvalue,omitempty" tf:"targetvalue,omitempty"`
}

type TargetxpathInitParameters struct {

	// (String) Assertion operator. Note Only some combinations of type and operator are valid (please refer to Datadog documentation).
	// The specific operator to use on the path.
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) Expected matching value.
	// Expected matching value.
	Targetvalue *string `json:"targetvalue,omitempty" tf:"targetvalue,omitempty"`

	// (String) The xpath to assert.
	// The xpath to assert.
	Xpath *string `json:"xpath,omitempty" tf:"xpath,omitempty"`
}

type TargetxpathObservation struct {

	// (String) Assertion operator. Note Only some combinations of type and operator are valid (please refer to Datadog documentation).
	// The specific operator to use on the path.
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) Expected matching value.
	// Expected matching value.
	Targetvalue *string `json:"targetvalue,omitempty" tf:"targetvalue,omitempty"`

	// (String) The xpath to assert.
	// The xpath to assert.
	Xpath *string `json:"xpath,omitempty" tf:"xpath,omitempty"`
}

type TargetxpathParameters struct {

	// (String) Assertion operator. Note Only some combinations of type and operator are valid (please refer to Datadog documentation).
	// The specific operator to use on the path.
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) Expected matching value.
	// Expected matching value.
	// +kubebuilder:validation:Optional
	Targetvalue *string `json:"targetvalue,omitempty" tf:"targetvalue,omitempty"`

	// (String) The xpath to assert.
	// The xpath to assert.
	// +kubebuilder:validation:Optional
	Xpath *string `json:"xpath" tf:"xpath,omitempty"`
}

type TestAssertionInitParameters struct {

	// (String) Assertion operator. Note Only some combinations of type and operator are valid (please refer to Datadog documentation).
	// Assertion operator. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)).
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) If assertion type is header, this is the header name.
	// If assertion type is `header`, this is the header name.
	Property *string `json:"property,omitempty" tf:"property,omitempty"`

	// (String) Expected value. Depends on the assertion type, refer to Datadog documentation for details.
	// Expected value. Depends on the assertion type, refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test) for details.
	Target *string `json:"target,omitempty" tf:"target,omitempty"`

	// (Block List, Max: 1) Expected structure if operator is validatesJSONPath. Exactly one nested block is allowed with the structure below. (see below for nested schema)
	// Expected structure if `operator` is `validatesJSONPath`. Exactly one nested block is allowed with the structure below.
	Targetjsonpath []AssertionTargetjsonpathInitParameters `json:"targetjsonpath,omitempty" tf:"targetjsonpath,omitempty"`

	// (Block List, Max: 1) Expected structure if operator is validatesXPath. Exactly one nested block is allowed with the structure below. (see below for nested schema)
	// Expected structure if `operator` is `validatesXPath`. Exactly one nested block is allowed with the structure below.
	Targetxpath []AssertionTargetxpathInitParameters `json:"targetxpath,omitempty" tf:"targetxpath,omitempty"`

	// (String) Timings scope for response time assertions. Valid values are all, withoutDNS.
	// Timings scope for response time assertions. Valid values are `all`, `withoutDNS`.
	TimingsScope *string `json:"timingsScope,omitempty" tf:"timings_scope,omitempty"`

	// (String) Synthetics test type. Valid values are api, browser.
	// Type of assertion. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)). Valid values are `body`, `header`, `statusCode`, `certificate`, `responseTime`, `property`, `recordEvery`, `recordSome`, `tlsVersion`, `minTlsVersion`, `latency`, `packetLossPercentage`, `packetsReceived`, `networkHop`, `receivedMessage`, `grpcHealthcheckStatus`, `grpcMetadata`, `grpcProto`, `connection`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type TestAssertionObservation struct {

	// (String) Assertion operator. Note Only some combinations of type and operator are valid (please refer to Datadog documentation).
	// Assertion operator. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)).
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) If assertion type is header, this is the header name.
	// If assertion type is `header`, this is the header name.
	Property *string `json:"property,omitempty" tf:"property,omitempty"`

	// (String) Expected value. Depends on the assertion type, refer to Datadog documentation for details.
	// Expected value. Depends on the assertion type, refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test) for details.
	Target *string `json:"target,omitempty" tf:"target,omitempty"`

	// (Block List, Max: 1) Expected structure if operator is validatesJSONPath. Exactly one nested block is allowed with the structure below. (see below for nested schema)
	// Expected structure if `operator` is `validatesJSONPath`. Exactly one nested block is allowed with the structure below.
	Targetjsonpath []AssertionTargetjsonpathObservation `json:"targetjsonpath,omitempty" tf:"targetjsonpath,omitempty"`

	// (Block List, Max: 1) Expected structure if operator is validatesXPath. Exactly one nested block is allowed with the structure below. (see below for nested schema)
	// Expected structure if `operator` is `validatesXPath`. Exactly one nested block is allowed with the structure below.
	Targetxpath []AssertionTargetxpathObservation `json:"targetxpath,omitempty" tf:"targetxpath,omitempty"`

	// (String) Timings scope for response time assertions. Valid values are all, withoutDNS.
	// Timings scope for response time assertions. Valid values are `all`, `withoutDNS`.
	TimingsScope *string `json:"timingsScope,omitempty" tf:"timings_scope,omitempty"`

	// (String) Synthetics test type. Valid values are api, browser.
	// Type of assertion. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)). Valid values are `body`, `header`, `statusCode`, `certificate`, `responseTime`, `property`, `recordEvery`, `recordSome`, `tlsVersion`, `minTlsVersion`, `latency`, `packetLossPercentage`, `packetsReceived`, `networkHop`, `receivedMessage`, `grpcHealthcheckStatus`, `grpcMetadata`, `grpcProto`, `connection`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type TestAssertionParameters struct {

	// (String) Assertion operator. Note Only some combinations of type and operator are valid (please refer to Datadog documentation).
	// Assertion operator. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)).
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) If assertion type is header, this is the header name.
	// If assertion type is `header`, this is the header name.
	// +kubebuilder:validation:Optional
	Property *string `json:"property,omitempty" tf:"property,omitempty"`

	// (String) Expected value. Depends on the assertion type, refer to Datadog documentation for details.
	// Expected value. Depends on the assertion type, refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test) for details.
	// +kubebuilder:validation:Optional
	Target *string `json:"target,omitempty" tf:"target,omitempty"`

	// (Block List, Max: 1) Expected structure if operator is validatesJSONPath. Exactly one nested block is allowed with the structure below. (see below for nested schema)
	// Expected structure if `operator` is `validatesJSONPath`. Exactly one nested block is allowed with the structure below.
	// +kubebuilder:validation:Optional
	Targetjsonpath []AssertionTargetjsonpathParameters `json:"targetjsonpath,omitempty" tf:"targetjsonpath,omitempty"`

	// (Block List, Max: 1) Expected structure if operator is validatesXPath. Exactly one nested block is allowed with the structure below. (see below for nested schema)
	// Expected structure if `operator` is `validatesXPath`. Exactly one nested block is allowed with the structure below.
	// +kubebuilder:validation:Optional
	Targetxpath []AssertionTargetxpathParameters `json:"targetxpath,omitempty" tf:"targetxpath,omitempty"`

	// (String) Timings scope for response time assertions. Valid values are all, withoutDNS.
	// Timings scope for response time assertions. Valid values are `all`, `withoutDNS`.
	// +kubebuilder:validation:Optional
	TimingsScope *string `json:"timingsScope,omitempty" tf:"timings_scope,omitempty"`

	// (String) Synthetics test type. Valid values are api, browser.
	// Type of assertion. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)). Valid values are `body`, `header`, `statusCode`, `certificate`, `responseTime`, `property`, `recordEvery`, `recordSome`, `tlsVersion`, `minTlsVersion`, `latency`, `packetLossPercentage`, `packetsReceived`, `networkHop`, `receivedMessage`, `grpcHealthcheckStatus`, `grpcMetadata`, `grpcProto`, `connection`.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type TestInitParameters struct {

	// (Block List) Steps for multistep api tests (see below for nested schema)
	// Steps for multistep api tests
	APIStep []APIStepInitParameters `json:"apiStep,omitempty" tf:"api_step,omitempty"`

	// (Block List) Assertions used for the test. Multiple assertion blocks are allowed with the structure below. (see below for nested schema)
	// Assertions used for the test. Multiple `assertion` blocks are allowed with the structure below.
	Assertion []TestAssertionInitParameters `json:"assertion,omitempty" tf:"assertion,omitempty"`

	// (Block List) Steps for browser tests. (see below for nested schema)
	// Steps for browser tests.
	BrowserStep []BrowserStepInitParameters `json:"browserStep,omitempty" tf:"browser_step,omitempty"`

	// (Block List) Variables used for a browser test steps. Multiple variable blocks are allowed with the structure below. (see below for nested schema)
	// Variables used for a browser test steps. Multiple `variable` blocks are allowed with the structure below.
	BrowserVariable []BrowserVariableInitParameters `json:"browserVariable,omitempty" tf:"browser_variable,omitempty"`

	// (Block List) Variables used for the test configuration. Multiple config_variable blocks are allowed with the structure below. (see below for nested schema)
	// Variables used for the test configuration. Multiple `config_variable` blocks are allowed with the structure below.
	ConfigVariable []ConfigVariableInitParameters `json:"configVariable,omitempty" tf:"config_variable,omitempty"`

	// (List of String) Required if type = "browser". Array with the different device IDs used to run the test. Valid values are laptop_large, tablet, mobile_small, chrome.laptop_large, chrome.tablet, chrome.mobile_small, firefox.laptop_large, firefox.tablet, firefox.mobile_small, edge.laptop_large, edge.tablet, edge.mobile_small.
	// Required if `type = "browser"`. Array with the different device IDs used to run the test. Valid values are `laptop_large`, `tablet`, `mobile_small`, `chrome.laptop_large`, `chrome.tablet`, `chrome.mobile_small`, `firefox.laptop_large`, `firefox.tablet`, `firefox.mobile_small`, `edge.laptop_large`, `edge.tablet`, `edge.mobile_small`.
	DeviceIds []*string `json:"deviceIds,omitempty" tf:"device_ids,omitempty"`

	// (Set of String) Array of locations used to run the test. Refer to the Datadog Synthetics location data source to retrieve the list of locations.
	// Array of locations used to run the test. Refer to [the Datadog Synthetics location data source](https://registry.io/providers/DataDog/datadog/latest/docs/data-sources/synthetics_locations) to retrieve the list of locations.
	// +listType=set
	Locations []*string `json:"locations,omitempty" tf:"locations,omitempty"`

	// (String) A message to include with notifications for this synthetics test. Email notifications can be sent to specific users by using the same @username notation as events. Defaults to "".
	// A message to include with notifications for this synthetics test. Email notifications can be sent to specific users by using the same `@username` notation as events. Defaults to `""`.
	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	// (String) Name of Datadog synthetics test.
	// Name of Datadog synthetics test.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List, Max: 1) (see below for nested schema)
	OptionsList []OptionsListInitParameters `json:"optionsList,omitempty" tf:"options_list,omitempty"`

	// (Block List, Max: 1) The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below. (see below for nested schema)
	// The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below.
	RequestBasicauth []TestRequestBasicauthInitParameters `json:"requestBasicauth,omitempty" tf:"request_basicauth,omitempty"`

	// (Block List, Max: 1) Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure below. (see below for nested schema)
	// Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure below.
	RequestClientCertificate []TestRequestClientCertificateInitParameters `json:"requestClientCertificate,omitempty" tf:"request_client_certificate,omitempty"`

	// (Block List, Max: 1) Required if type = "api". The synthetics test request. (see below for nested schema)
	// Required if `type = "api"`. The synthetics test request.
	RequestDefinition []TestRequestDefinitionInitParameters `json:"requestDefinition,omitempty" tf:"request_definition,omitempty"`

	// (Map of String) Header name and value map.
	// Header name and value map.
	// +mapType=granular
	RequestHeaders map[string]*string `json:"requestHeaders,omitempty" tf:"request_headers,omitempty"`

	// (Map of String) Metadata to include when performing the gRPC test.
	// Metadata to include when performing the gRPC test.
	// +mapType=granular
	RequestMetadata map[string]*string `json:"requestMetadata,omitempty" tf:"request_metadata,omitempty"`

	// (Block List, Max: 1) The proxy to perform the test. (see below for nested schema)
	// The proxy to perform the test.
	RequestProxy []TestRequestProxyInitParameters `json:"requestProxy,omitempty" tf:"request_proxy,omitempty"`

	// (Map of String) Query arguments name and value map.
	// Query arguments name and value map.
	// +mapType=granular
	RequestQuery map[string]*string `json:"requestQuery,omitempty" tf:"request_query,omitempty"`

	// Cookie syntax.
	// Cookies to be used for a browser test request, using the [Set-Cookie](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie) syntax.
	SetCookie *string `json:"setCookie,omitempty" tf:"set_cookie,omitempty"`

	// (String) Define whether you want to start (live) or pause (paused) a Synthetic test. Valid values are live, paused.
	// Define whether you want to start (`live`) or pause (`paused`) a Synthetic test. Valid values are `live`, `paused`.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// (String) The subtype of the Synthetic API test. Defaults to http. Valid values are http, ssl, tcp, dns, multi, icmp, udp, websocket, grpc.
	// The subtype of the Synthetic API test. Defaults to `http`. Valid values are `http`, `ssl`, `tcp`, `dns`, `multi`, `icmp`, `udp`, `websocket`, `grpc`.
	Subtype *string `json:"subtype,omitempty" tf:"subtype,omitempty"`

	// (List of String) A list of tags to associate with your synthetics test. This can help you categorize and filter tests in the manage synthetics page of the UI. Default is an empty list ([]).
	// A list of tags to associate with your synthetics test. This can help you categorize and filter tests in the manage synthetics page of the UI. Default is an empty list (`[]`).
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// (String) Synthetics test type. Valid values are api, browser.
	// Synthetics test type. Valid values are `api`, `browser`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type TestObservation struct {

	// (Block List) Steps for multistep api tests (see below for nested schema)
	// Steps for multistep api tests
	APIStep []APIStepObservation `json:"apiStep,omitempty" tf:"api_step,omitempty"`

	// (Block List) Assertions used for the test. Multiple assertion blocks are allowed with the structure below. (see below for nested schema)
	// Assertions used for the test. Multiple `assertion` blocks are allowed with the structure below.
	Assertion []TestAssertionObservation `json:"assertion,omitempty" tf:"assertion,omitempty"`

	// (Block List) Steps for browser tests. (see below for nested schema)
	// Steps for browser tests.
	BrowserStep []BrowserStepObservation `json:"browserStep,omitempty" tf:"browser_step,omitempty"`

	// (Block List) Variables used for a browser test steps. Multiple variable blocks are allowed with the structure below. (see below for nested schema)
	// Variables used for a browser test steps. Multiple `variable` blocks are allowed with the structure below.
	BrowserVariable []BrowserVariableObservation `json:"browserVariable,omitempty" tf:"browser_variable,omitempty"`

	// (Block List) Variables used for the test configuration. Multiple config_variable blocks are allowed with the structure below. (see below for nested schema)
	// Variables used for the test configuration. Multiple `config_variable` blocks are allowed with the structure below.
	ConfigVariable []ConfigVariableObservation `json:"configVariable,omitempty" tf:"config_variable,omitempty"`

	// (List of String) Required if type = "browser". Array with the different device IDs used to run the test. Valid values are laptop_large, tablet, mobile_small, chrome.laptop_large, chrome.tablet, chrome.mobile_small, firefox.laptop_large, firefox.tablet, firefox.mobile_small, edge.laptop_large, edge.tablet, edge.mobile_small.
	// Required if `type = "browser"`. Array with the different device IDs used to run the test. Valid values are `laptop_large`, `tablet`, `mobile_small`, `chrome.laptop_large`, `chrome.tablet`, `chrome.mobile_small`, `firefox.laptop_large`, `firefox.tablet`, `firefox.mobile_small`, `edge.laptop_large`, `edge.tablet`, `edge.mobile_small`.
	DeviceIds []*string `json:"deviceIds,omitempty" tf:"device_ids,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Set of String) Array of locations used to run the test. Refer to the Datadog Synthetics location data source to retrieve the list of locations.
	// Array of locations used to run the test. Refer to [the Datadog Synthetics location data source](https://registry.io/providers/DataDog/datadog/latest/docs/data-sources/synthetics_locations) to retrieve the list of locations.
	// +listType=set
	Locations []*string `json:"locations,omitempty" tf:"locations,omitempty"`

	// (String) A message to include with notifications for this synthetics test. Email notifications can be sent to specific users by using the same @username notation as events. Defaults to "".
	// A message to include with notifications for this synthetics test. Email notifications can be sent to specific users by using the same `@username` notation as events. Defaults to `""`.
	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	// (Number) ID of the monitor associated with the Datadog synthetics test.
	// ID of the monitor associated with the Datadog synthetics test.
	MonitorID *float64 `json:"monitorId,omitempty" tf:"monitor_id,omitempty"`

	// (String) Name of Datadog synthetics test.
	// Name of Datadog synthetics test.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List, Max: 1) (see below for nested schema)
	OptionsList []OptionsListObservation `json:"optionsList,omitempty" tf:"options_list,omitempty"`

	// (Block List, Max: 1) The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below. (see below for nested schema)
	// The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below.
	RequestBasicauth []TestRequestBasicauthObservation `json:"requestBasicauth,omitempty" tf:"request_basicauth,omitempty"`

	// (Block List, Max: 1) Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure below. (see below for nested schema)
	// Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure below.
	RequestClientCertificate []TestRequestClientCertificateObservation `json:"requestClientCertificate,omitempty" tf:"request_client_certificate,omitempty"`

	// (Block List, Max: 1) Required if type = "api". The synthetics test request. (see below for nested schema)
	// Required if `type = "api"`. The synthetics test request.
	RequestDefinition []TestRequestDefinitionObservation `json:"requestDefinition,omitempty" tf:"request_definition,omitempty"`

	// (Map of String) Header name and value map.
	// Header name and value map.
	// +mapType=granular
	RequestHeaders map[string]*string `json:"requestHeaders,omitempty" tf:"request_headers,omitempty"`

	// (Map of String) Metadata to include when performing the gRPC test.
	// Metadata to include when performing the gRPC test.
	// +mapType=granular
	RequestMetadata map[string]*string `json:"requestMetadata,omitempty" tf:"request_metadata,omitempty"`

	// (Block List, Max: 1) The proxy to perform the test. (see below for nested schema)
	// The proxy to perform the test.
	RequestProxy []TestRequestProxyObservation `json:"requestProxy,omitempty" tf:"request_proxy,omitempty"`

	// (Map of String) Query arguments name and value map.
	// Query arguments name and value map.
	// +mapType=granular
	RequestQuery map[string]*string `json:"requestQuery,omitempty" tf:"request_query,omitempty"`

	// Cookie syntax.
	// Cookies to be used for a browser test request, using the [Set-Cookie](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie) syntax.
	SetCookie *string `json:"setCookie,omitempty" tf:"set_cookie,omitempty"`

	// (String) Define whether you want to start (live) or pause (paused) a Synthetic test. Valid values are live, paused.
	// Define whether you want to start (`live`) or pause (`paused`) a Synthetic test. Valid values are `live`, `paused`.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// (String) The subtype of the Synthetic API test. Defaults to http. Valid values are http, ssl, tcp, dns, multi, icmp, udp, websocket, grpc.
	// The subtype of the Synthetic API test. Defaults to `http`. Valid values are `http`, `ssl`, `tcp`, `dns`, `multi`, `icmp`, `udp`, `websocket`, `grpc`.
	Subtype *string `json:"subtype,omitempty" tf:"subtype,omitempty"`

	// (List of String) A list of tags to associate with your synthetics test. This can help you categorize and filter tests in the manage synthetics page of the UI. Default is an empty list ([]).
	// A list of tags to associate with your synthetics test. This can help you categorize and filter tests in the manage synthetics page of the UI. Default is an empty list (`[]`).
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// (String) Synthetics test type. Valid values are api, browser.
	// Synthetics test type. Valid values are `api`, `browser`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type TestParameters struct {

	// (Block List) Steps for multistep api tests (see below for nested schema)
	// Steps for multistep api tests
	// +kubebuilder:validation:Optional
	APIStep []APIStepParameters `json:"apiStep,omitempty" tf:"api_step,omitempty"`

	// (Block List) Assertions used for the test. Multiple assertion blocks are allowed with the structure below. (see below for nested schema)
	// Assertions used for the test. Multiple `assertion` blocks are allowed with the structure below.
	// +kubebuilder:validation:Optional
	Assertion []TestAssertionParameters `json:"assertion,omitempty" tf:"assertion,omitempty"`

	// (Block List) Steps for browser tests. (see below for nested schema)
	// Steps for browser tests.
	// +kubebuilder:validation:Optional
	BrowserStep []BrowserStepParameters `json:"browserStep,omitempty" tf:"browser_step,omitempty"`

	// (Block List) Variables used for a browser test steps. Multiple variable blocks are allowed with the structure below. (see below for nested schema)
	// Variables used for a browser test steps. Multiple `variable` blocks are allowed with the structure below.
	// +kubebuilder:validation:Optional
	BrowserVariable []BrowserVariableParameters `json:"browserVariable,omitempty" tf:"browser_variable,omitempty"`

	// (Block List) Variables used for the test configuration. Multiple config_variable blocks are allowed with the structure below. (see below for nested schema)
	// Variables used for the test configuration. Multiple `config_variable` blocks are allowed with the structure below.
	// +kubebuilder:validation:Optional
	ConfigVariable []ConfigVariableParameters `json:"configVariable,omitempty" tf:"config_variable,omitempty"`

	// (List of String) Required if type = "browser". Array with the different device IDs used to run the test. Valid values are laptop_large, tablet, mobile_small, chrome.laptop_large, chrome.tablet, chrome.mobile_small, firefox.laptop_large, firefox.tablet, firefox.mobile_small, edge.laptop_large, edge.tablet, edge.mobile_small.
	// Required if `type = "browser"`. Array with the different device IDs used to run the test. Valid values are `laptop_large`, `tablet`, `mobile_small`, `chrome.laptop_large`, `chrome.tablet`, `chrome.mobile_small`, `firefox.laptop_large`, `firefox.tablet`, `firefox.mobile_small`, `edge.laptop_large`, `edge.tablet`, `edge.mobile_small`.
	// +kubebuilder:validation:Optional
	DeviceIds []*string `json:"deviceIds,omitempty" tf:"device_ids,omitempty"`

	// (Set of String) Array of locations used to run the test. Refer to the Datadog Synthetics location data source to retrieve the list of locations.
	// Array of locations used to run the test. Refer to [the Datadog Synthetics location data source](https://registry.io/providers/DataDog/datadog/latest/docs/data-sources/synthetics_locations) to retrieve the list of locations.
	// +kubebuilder:validation:Optional
	// +listType=set
	Locations []*string `json:"locations,omitempty" tf:"locations,omitempty"`

	// (String) A message to include with notifications for this synthetics test. Email notifications can be sent to specific users by using the same @username notation as events. Defaults to "".
	// A message to include with notifications for this synthetics test. Email notifications can be sent to specific users by using the same `@username` notation as events. Defaults to `""`.
	// +kubebuilder:validation:Optional
	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	// (String) Name of Datadog synthetics test.
	// Name of Datadog synthetics test.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List, Max: 1) (see below for nested schema)
	// +kubebuilder:validation:Optional
	OptionsList []OptionsListParameters `json:"optionsList,omitempty" tf:"options_list,omitempty"`

	// (Block List, Max: 1) The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below. (see below for nested schema)
	// The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below.
	// +kubebuilder:validation:Optional
	RequestBasicauth []TestRequestBasicauthParameters `json:"requestBasicauth,omitempty" tf:"request_basicauth,omitempty"`

	// (Block List, Max: 1) Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure below. (see below for nested schema)
	// Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure below.
	// +kubebuilder:validation:Optional
	RequestClientCertificate []TestRequestClientCertificateParameters `json:"requestClientCertificate,omitempty" tf:"request_client_certificate,omitempty"`

	// (Block List, Max: 1) Required if type = "api". The synthetics test request. (see below for nested schema)
	// Required if `type = "api"`. The synthetics test request.
	// +kubebuilder:validation:Optional
	RequestDefinition []TestRequestDefinitionParameters `json:"requestDefinition,omitempty" tf:"request_definition,omitempty"`

	// (Map of String) Header name and value map.
	// Header name and value map.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	RequestHeaders map[string]*string `json:"requestHeaders,omitempty" tf:"request_headers,omitempty"`

	// (Map of String) Metadata to include when performing the gRPC test.
	// Metadata to include when performing the gRPC test.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	RequestMetadata map[string]*string `json:"requestMetadata,omitempty" tf:"request_metadata,omitempty"`

	// (Block List, Max: 1) The proxy to perform the test. (see below for nested schema)
	// The proxy to perform the test.
	// +kubebuilder:validation:Optional
	RequestProxy []TestRequestProxyParameters `json:"requestProxy,omitempty" tf:"request_proxy,omitempty"`

	// (Map of String) Query arguments name and value map.
	// Query arguments name and value map.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	RequestQuery map[string]*string `json:"requestQuery,omitempty" tf:"request_query,omitempty"`

	// Cookie syntax.
	// Cookies to be used for a browser test request, using the [Set-Cookie](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie) syntax.
	// +kubebuilder:validation:Optional
	SetCookie *string `json:"setCookie,omitempty" tf:"set_cookie,omitempty"`

	// (String) Define whether you want to start (live) or pause (paused) a Synthetic test. Valid values are live, paused.
	// Define whether you want to start (`live`) or pause (`paused`) a Synthetic test. Valid values are `live`, `paused`.
	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// (String) The subtype of the Synthetic API test. Defaults to http. Valid values are http, ssl, tcp, dns, multi, icmp, udp, websocket, grpc.
	// The subtype of the Synthetic API test. Defaults to `http`. Valid values are `http`, `ssl`, `tcp`, `dns`, `multi`, `icmp`, `udp`, `websocket`, `grpc`.
	// +kubebuilder:validation:Optional
	Subtype *string `json:"subtype,omitempty" tf:"subtype,omitempty"`

	// (List of String) A list of tags to associate with your synthetics test. This can help you categorize and filter tests in the manage synthetics page of the UI. Default is an empty list ([]).
	// A list of tags to associate with your synthetics test. This can help you categorize and filter tests in the manage synthetics page of the UI. Default is an empty list (`[]`).
	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// (String) Synthetics test type. Valid values are api, browser.
	// Synthetics test type. Valid values are `api`, `browser`.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type TestRequestBasicauthInitParameters struct {

	// client or oauth-rop authentication.
	// Access token url for `oauth-client` or `oauth-rop` authentication.
	AccessTokenURL *string `json:"accessTokenUrl,omitempty" tf:"access_token_url,omitempty"`

	// client or oauth-rop authentication. Defaults to "".
	// Audience for `oauth-client` or `oauth-rop` authentication. Defaults to `""`.
	Audience *string `json:"audience,omitempty" tf:"audience,omitempty"`

	// client or oauth-rop authentication.
	// Client ID for `oauth-client` or `oauth-rop` authentication.
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// (String) Domain for ntlm authentication.
	// Domain for `ntlm` authentication.
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// (String) Region for SIGV4 authentication.
	// Region for `SIGV4` authentication.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// client or oauth-rop authentication. Defaults to "".
	// Resource for `oauth-client` or `oauth-rop` authentication. Defaults to `""`.
	Resource *string `json:"resource,omitempty" tf:"resource,omitempty"`

	// client or oauth-rop authentication. Defaults to "".
	// Scope for `oauth-client` or `oauth-rop` authentication. Defaults to `""`.
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// (String) Service name for SIGV4 authentication.
	// Service name for `SIGV4` authentication.
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// (String) Session token for SIGV4 authentication.
	// Session token for `SIGV4` authentication.
	SessionToken *string `json:"sessionToken,omitempty" tf:"session_token,omitempty"`

	// client or oauth-rop authentication. Valid values are header, body.
	// Token API Authentication for `oauth-client` or `oauth-rop` authentication. Valid values are `header`, `body`.
	TokenAPIAuthentication *string `json:"tokenApiAuthentication,omitempty" tf:"token_api_authentication,omitempty"`

	// (String) Synthetics test type. Valid values are api, browser.
	// Type of basic authentication to use when performing the test. Defaults to `"web"`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) Username for authentication.
	// Username for authentication.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`

	// (String) Workstation for ntlm authentication.
	// Workstation for `ntlm` authentication.
	Workstation *string `json:"workstation,omitempty" tf:"workstation,omitempty"`
}

type TestRequestBasicauthObservation struct {

	// client or oauth-rop authentication.
	// Access token url for `oauth-client` or `oauth-rop` authentication.
	AccessTokenURL *string `json:"accessTokenUrl,omitempty" tf:"access_token_url,omitempty"`

	// client or oauth-rop authentication. Defaults to "".
	// Audience for `oauth-client` or `oauth-rop` authentication. Defaults to `""`.
	Audience *string `json:"audience,omitempty" tf:"audience,omitempty"`

	// client or oauth-rop authentication.
	// Client ID for `oauth-client` or `oauth-rop` authentication.
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// (String) Domain for ntlm authentication.
	// Domain for `ntlm` authentication.
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// (String) Region for SIGV4 authentication.
	// Region for `SIGV4` authentication.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// client or oauth-rop authentication. Defaults to "".
	// Resource for `oauth-client` or `oauth-rop` authentication. Defaults to `""`.
	Resource *string `json:"resource,omitempty" tf:"resource,omitempty"`

	// client or oauth-rop authentication. Defaults to "".
	// Scope for `oauth-client` or `oauth-rop` authentication. Defaults to `""`.
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// (String) Service name for SIGV4 authentication.
	// Service name for `SIGV4` authentication.
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// (String) Session token for SIGV4 authentication.
	// Session token for `SIGV4` authentication.
	SessionToken *string `json:"sessionToken,omitempty" tf:"session_token,omitempty"`

	// client or oauth-rop authentication. Valid values are header, body.
	// Token API Authentication for `oauth-client` or `oauth-rop` authentication. Valid values are `header`, `body`.
	TokenAPIAuthentication *string `json:"tokenApiAuthentication,omitempty" tf:"token_api_authentication,omitempty"`

	// (String) Synthetics test type. Valid values are api, browser.
	// Type of basic authentication to use when performing the test. Defaults to `"web"`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) Username for authentication.
	// Username for authentication.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`

	// (String) Workstation for ntlm authentication.
	// Workstation for `ntlm` authentication.
	Workstation *string `json:"workstation,omitempty" tf:"workstation,omitempty"`
}

type TestRequestBasicauthParameters struct {

	// (String, Sensitive) Access key for SIGV4 authentication.
	// Access key for `SIGV4` authentication.
	// +kubebuilder:validation:Optional
	AccessKeySecretRef *v1.SecretKeySelector `json:"accessKeySecretRef,omitempty" tf:"-"`

	// client or oauth-rop authentication.
	// Access token url for `oauth-client` or `oauth-rop` authentication.
	// +kubebuilder:validation:Optional
	AccessTokenURL *string `json:"accessTokenUrl,omitempty" tf:"access_token_url,omitempty"`

	// client or oauth-rop authentication. Defaults to "".
	// Audience for `oauth-client` or `oauth-rop` authentication. Defaults to `""`.
	// +kubebuilder:validation:Optional
	Audience *string `json:"audience,omitempty" tf:"audience,omitempty"`

	// client or oauth-rop authentication.
	// Client ID for `oauth-client` or `oauth-rop` authentication.
	// +kubebuilder:validation:Optional
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// client or oauth-rop authentication.
	// Client secret for `oauth-client` or `oauth-rop` authentication.
	// +kubebuilder:validation:Optional
	ClientSecretSecretRef *v1.SecretKeySelector `json:"clientSecretSecretRef,omitempty" tf:"-"`

	// (String) Domain for ntlm authentication.
	// Domain for `ntlm` authentication.
	// +kubebuilder:validation:Optional
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// (String, Sensitive) Password for authentication.
	// Password for authentication.
	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// (String) Region for SIGV4 authentication.
	// Region for `SIGV4` authentication.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// client or oauth-rop authentication. Defaults to "".
	// Resource for `oauth-client` or `oauth-rop` authentication. Defaults to `""`.
	// +kubebuilder:validation:Optional
	Resource *string `json:"resource,omitempty" tf:"resource,omitempty"`

	// client or oauth-rop authentication. Defaults to "".
	// Scope for `oauth-client` or `oauth-rop` authentication. Defaults to `""`.
	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// (String, Sensitive) Secret key for SIGV4 authentication.
	// Secret key for `SIGV4` authentication.
	// +kubebuilder:validation:Optional
	SecretKeySecretRef *v1.SecretKeySelector `json:"secretKeySecretRef,omitempty" tf:"-"`

	// (String) Service name for SIGV4 authentication.
	// Service name for `SIGV4` authentication.
	// +kubebuilder:validation:Optional
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// (String) Session token for SIGV4 authentication.
	// Session token for `SIGV4` authentication.
	// +kubebuilder:validation:Optional
	SessionToken *string `json:"sessionToken,omitempty" tf:"session_token,omitempty"`

	// client or oauth-rop authentication. Valid values are header, body.
	// Token API Authentication for `oauth-client` or `oauth-rop` authentication. Valid values are `header`, `body`.
	// +kubebuilder:validation:Optional
	TokenAPIAuthentication *string `json:"tokenApiAuthentication,omitempty" tf:"token_api_authentication,omitempty"`

	// (String) Synthetics test type. Valid values are api, browser.
	// Type of basic authentication to use when performing the test. Defaults to `"web"`.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) Username for authentication.
	// Username for authentication.
	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`

	// (String) Workstation for ntlm authentication.
	// Workstation for `ntlm` authentication.
	// +kubebuilder:validation:Optional
	Workstation *string `json:"workstation,omitempty" tf:"workstation,omitempty"`
}

type TestRequestClientCertificateInitParameters struct {

	// (Block List, Min: 1, Max: 1) (see below for nested schema)
	Cert []RequestClientCertificateCertInitParameters `json:"cert,omitempty" tf:"cert,omitempty"`

	// (Block List, Min: 1, Max: 1) (see below for nested schema)
	Key []RequestClientCertificateKeyInitParameters `json:"key,omitempty" tf:"key,omitempty"`
}

type TestRequestClientCertificateObservation struct {

	// (Block List, Min: 1, Max: 1) (see below for nested schema)
	Cert []RequestClientCertificateCertObservation `json:"cert,omitempty" tf:"cert,omitempty"`

	// (Block List, Min: 1, Max: 1) (see below for nested schema)
	Key []RequestClientCertificateKeyObservation `json:"key,omitempty" tf:"key,omitempty"`
}

type TestRequestClientCertificateParameters struct {

	// (Block List, Min: 1, Max: 1) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Cert []RequestClientCertificateCertParameters `json:"cert" tf:"cert,omitempty"`

	// (Block List, Min: 1, Max: 1) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Key []RequestClientCertificateKeyParameters `json:"key" tf:"key,omitempty"`
}

type TestRequestDefinitionInitParameters struct {

	// (String) The request body.
	// The request body.
	Body *string `json:"body,omitempty" tf:"body,omitempty"`

	// www-form-urlencoded, graphql.
	// Type of the request body. Valid values are `text/plain`, `application/json`, `text/xml`, `text/html`, `application/x-www-form-urlencoded`, `graphql`.
	BodyType *string `json:"bodyType,omitempty" tf:"body_type,omitempty"`

	// (String) The type of gRPC call to perform. Valid values are healthcheck, unary.
	// The type of gRPC call to perform. Valid values are `healthcheck`, `unary`.
	CallType *string `json:"callType,omitempty" tf:"call_type,omitempty"`

	// (List of String) By default, the client certificate is applied on the domain of the starting URL for browser tests. If you want your client certificate to be applied on other domains instead, add them in certificate_domains.
	// By default, the client certificate is applied on the domain of the starting URL for browser tests. If you want your client certificate to be applied on other domains instead, add them in `certificate_domains`.
	CertificateDomains []*string `json:"certificateDomains,omitempty" tf:"certificate_domains,omitempty"`

	// (String) DNS server to use for DNS tests (subtype = "dns").
	// DNS server to use for DNS tests (`subtype = "dns"`).
	DNSServer *string `json:"dnsServer,omitempty" tf:"dns_server,omitempty"`

	// (Number) DNS server port to use for DNS tests.
	// DNS server port to use for DNS tests.
	DNSServerPort *float64 `json:"dnsServerPort,omitempty" tf:"dns_server_port,omitempty"`

	// (String) Host name to perform the test with.
	// Host name to perform the test with.
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// (String) A message to include with notifications for this synthetics test. Email notifications can be sent to specific users by using the same @username notation as events. Defaults to "".
	// For UDP and websocket tests, message to send with the request.
	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	// (String) Either the HTTP method/verb to use or a gRPC method available on the service set in the service field. Required if subtype is HTTP or if subtype is grpc and callType is unary.
	// Either the HTTP method/verb to use or a gRPC method available on the service set in the `service` field. Required if `subtype` is `HTTP` or if `subtype` is `grpc` and `callType` is `unary`.
	Method *string `json:"method,omitempty" tf:"method,omitempty"`

	// (Boolean) Determines whether or not to save the response body.
	// Determines whether or not to save the response body.
	NoSavingResponseBody *bool `json:"noSavingResponseBody,omitempty" tf:"no_saving_response_body,omitempty"`

	// (Number) Number of pings to use per test for ICMP tests (subtype = "icmp") between 0 and 10.
	// Number of pings to use per test for ICMP tests (`subtype = "icmp"`) between 0 and 10.
	NumberOfPackets *float64 `json:"numberOfPackets,omitempty" tf:"number_of_packets,omitempty"`

	// (Boolean) Persist cookies across redirects.
	// Persist cookies across redirects.
	PersistCookies *bool `json:"persistCookies,omitempty" tf:"persist_cookies,omitempty"`

	// (String) The content of a proto file as a string.
	// The content of a proto file as a string.
	PlainProtoFile *string `json:"plainProtoFile,omitempty" tf:"plain_proto_file,omitempty"`

	// (Number) Port to use when performing the test.
	// Port to use when performing the test.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// (String, Deprecated) A protobuf JSON descriptor. Deprecated. Use plain_proto_file instead.
	// A protobuf JSON descriptor. **Deprecated.** Use `plain_proto_file` instead.
	ProtoJSONDescriptor *string `json:"protoJsonDescriptor,omitempty" tf:"proto_json_descriptor,omitempty"`

	// (String) For SSL tests, it specifies on which server you want to initiate the TLS handshake, allowing the server to present one of multiple possible certificates on the same IP address and TCP port number.
	// For SSL tests, it specifies on which server you want to initiate the TLS handshake, allowing the server to present one of multiple possible certificates on the same IP address and TCP port number.
	Servername *string `json:"servername,omitempty" tf:"servername,omitempty"`

	// (String) The gRPC service on which you want to perform the gRPC call.
	// The gRPC service on which you want to perform the gRPC call.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`

	// (Boolean) This will turn on a traceroute probe to discover all gateways along the path to the host destination. For ICMP tests (subtype = "icmp").
	// This will turn on a traceroute probe to discover all gateways along the path to the host destination. For ICMP tests (`subtype = "icmp"`).
	ShouldTrackHops *bool `json:"shouldTrackHops,omitempty" tf:"should_track_hops,omitempty"`

	// (Number) Timeout in seconds for the test. Defaults to 60.
	// Timeout in seconds for the test. Defaults to `60`.
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// (String) The URL to send the request to.
	// The URL to send the request to.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type TestRequestDefinitionObservation struct {

	// (String) The request body.
	// The request body.
	Body *string `json:"body,omitempty" tf:"body,omitempty"`

	// www-form-urlencoded, graphql.
	// Type of the request body. Valid values are `text/plain`, `application/json`, `text/xml`, `text/html`, `application/x-www-form-urlencoded`, `graphql`.
	BodyType *string `json:"bodyType,omitempty" tf:"body_type,omitempty"`

	// (String) The type of gRPC call to perform. Valid values are healthcheck, unary.
	// The type of gRPC call to perform. Valid values are `healthcheck`, `unary`.
	CallType *string `json:"callType,omitempty" tf:"call_type,omitempty"`

	// (List of String) By default, the client certificate is applied on the domain of the starting URL for browser tests. If you want your client certificate to be applied on other domains instead, add them in certificate_domains.
	// By default, the client certificate is applied on the domain of the starting URL for browser tests. If you want your client certificate to be applied on other domains instead, add them in `certificate_domains`.
	CertificateDomains []*string `json:"certificateDomains,omitempty" tf:"certificate_domains,omitempty"`

	// (String) DNS server to use for DNS tests (subtype = "dns").
	// DNS server to use for DNS tests (`subtype = "dns"`).
	DNSServer *string `json:"dnsServer,omitempty" tf:"dns_server,omitempty"`

	// (Number) DNS server port to use for DNS tests.
	// DNS server port to use for DNS tests.
	DNSServerPort *float64 `json:"dnsServerPort,omitempty" tf:"dns_server_port,omitempty"`

	// (String) Host name to perform the test with.
	// Host name to perform the test with.
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// (String) A message to include with notifications for this synthetics test. Email notifications can be sent to specific users by using the same @username notation as events. Defaults to "".
	// For UDP and websocket tests, message to send with the request.
	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	// (String) Either the HTTP method/verb to use or a gRPC method available on the service set in the service field. Required if subtype is HTTP or if subtype is grpc and callType is unary.
	// Either the HTTP method/verb to use or a gRPC method available on the service set in the `service` field. Required if `subtype` is `HTTP` or if `subtype` is `grpc` and `callType` is `unary`.
	Method *string `json:"method,omitempty" tf:"method,omitempty"`

	// (Boolean) Determines whether or not to save the response body.
	// Determines whether or not to save the response body.
	NoSavingResponseBody *bool `json:"noSavingResponseBody,omitempty" tf:"no_saving_response_body,omitempty"`

	// (Number) Number of pings to use per test for ICMP tests (subtype = "icmp") between 0 and 10.
	// Number of pings to use per test for ICMP tests (`subtype = "icmp"`) between 0 and 10.
	NumberOfPackets *float64 `json:"numberOfPackets,omitempty" tf:"number_of_packets,omitempty"`

	// (Boolean) Persist cookies across redirects.
	// Persist cookies across redirects.
	PersistCookies *bool `json:"persistCookies,omitempty" tf:"persist_cookies,omitempty"`

	// (String) The content of a proto file as a string.
	// The content of a proto file as a string.
	PlainProtoFile *string `json:"plainProtoFile,omitempty" tf:"plain_proto_file,omitempty"`

	// (Number) Port to use when performing the test.
	// Port to use when performing the test.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// (String, Deprecated) A protobuf JSON descriptor. Deprecated. Use plain_proto_file instead.
	// A protobuf JSON descriptor. **Deprecated.** Use `plain_proto_file` instead.
	ProtoJSONDescriptor *string `json:"protoJsonDescriptor,omitempty" tf:"proto_json_descriptor,omitempty"`

	// (String) For SSL tests, it specifies on which server you want to initiate the TLS handshake, allowing the server to present one of multiple possible certificates on the same IP address and TCP port number.
	// For SSL tests, it specifies on which server you want to initiate the TLS handshake, allowing the server to present one of multiple possible certificates on the same IP address and TCP port number.
	Servername *string `json:"servername,omitempty" tf:"servername,omitempty"`

	// (String) The gRPC service on which you want to perform the gRPC call.
	// The gRPC service on which you want to perform the gRPC call.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`

	// (Boolean) This will turn on a traceroute probe to discover all gateways along the path to the host destination. For ICMP tests (subtype = "icmp").
	// This will turn on a traceroute probe to discover all gateways along the path to the host destination. For ICMP tests (`subtype = "icmp"`).
	ShouldTrackHops *bool `json:"shouldTrackHops,omitempty" tf:"should_track_hops,omitempty"`

	// (Number) Timeout in seconds for the test. Defaults to 60.
	// Timeout in seconds for the test. Defaults to `60`.
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// (String) The URL to send the request to.
	// The URL to send the request to.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type TestRequestDefinitionParameters struct {

	// (String) The request body.
	// The request body.
	// +kubebuilder:validation:Optional
	Body *string `json:"body,omitempty" tf:"body,omitempty"`

	// www-form-urlencoded, graphql.
	// Type of the request body. Valid values are `text/plain`, `application/json`, `text/xml`, `text/html`, `application/x-www-form-urlencoded`, `graphql`.
	// +kubebuilder:validation:Optional
	BodyType *string `json:"bodyType,omitempty" tf:"body_type,omitempty"`

	// (String) The type of gRPC call to perform. Valid values are healthcheck, unary.
	// The type of gRPC call to perform. Valid values are `healthcheck`, `unary`.
	// +kubebuilder:validation:Optional
	CallType *string `json:"callType,omitempty" tf:"call_type,omitempty"`

	// (List of String) By default, the client certificate is applied on the domain of the starting URL for browser tests. If you want your client certificate to be applied on other domains instead, add them in certificate_domains.
	// By default, the client certificate is applied on the domain of the starting URL for browser tests. If you want your client certificate to be applied on other domains instead, add them in `certificate_domains`.
	// +kubebuilder:validation:Optional
	CertificateDomains []*string `json:"certificateDomains,omitempty" tf:"certificate_domains,omitempty"`

	// (String) DNS server to use for DNS tests (subtype = "dns").
	// DNS server to use for DNS tests (`subtype = "dns"`).
	// +kubebuilder:validation:Optional
	DNSServer *string `json:"dnsServer,omitempty" tf:"dns_server,omitempty"`

	// (Number) DNS server port to use for DNS tests.
	// DNS server port to use for DNS tests.
	// +kubebuilder:validation:Optional
	DNSServerPort *float64 `json:"dnsServerPort,omitempty" tf:"dns_server_port,omitempty"`

	// (String) Host name to perform the test with.
	// Host name to perform the test with.
	// +kubebuilder:validation:Optional
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// (String) A message to include with notifications for this synthetics test. Email notifications can be sent to specific users by using the same @username notation as events. Defaults to "".
	// For UDP and websocket tests, message to send with the request.
	// +kubebuilder:validation:Optional
	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	// (String) Either the HTTP method/verb to use or a gRPC method available on the service set in the service field. Required if subtype is HTTP or if subtype is grpc and callType is unary.
	// Either the HTTP method/verb to use or a gRPC method available on the service set in the `service` field. Required if `subtype` is `HTTP` or if `subtype` is `grpc` and `callType` is `unary`.
	// +kubebuilder:validation:Optional
	Method *string `json:"method,omitempty" tf:"method,omitempty"`

	// (Boolean) Determines whether or not to save the response body.
	// Determines whether or not to save the response body.
	// +kubebuilder:validation:Optional
	NoSavingResponseBody *bool `json:"noSavingResponseBody,omitempty" tf:"no_saving_response_body,omitempty"`

	// (Number) Number of pings to use per test for ICMP tests (subtype = "icmp") between 0 and 10.
	// Number of pings to use per test for ICMP tests (`subtype = "icmp"`) between 0 and 10.
	// +kubebuilder:validation:Optional
	NumberOfPackets *float64 `json:"numberOfPackets,omitempty" tf:"number_of_packets,omitempty"`

	// (Boolean) Persist cookies across redirects.
	// Persist cookies across redirects.
	// +kubebuilder:validation:Optional
	PersistCookies *bool `json:"persistCookies,omitempty" tf:"persist_cookies,omitempty"`

	// (String) The content of a proto file as a string.
	// The content of a proto file as a string.
	// +kubebuilder:validation:Optional
	PlainProtoFile *string `json:"plainProtoFile,omitempty" tf:"plain_proto_file,omitempty"`

	// (Number) Port to use when performing the test.
	// Port to use when performing the test.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// (String, Deprecated) A protobuf JSON descriptor. Deprecated. Use plain_proto_file instead.
	// A protobuf JSON descriptor. **Deprecated.** Use `plain_proto_file` instead.
	// +kubebuilder:validation:Optional
	ProtoJSONDescriptor *string `json:"protoJsonDescriptor,omitempty" tf:"proto_json_descriptor,omitempty"`

	// (String) For SSL tests, it specifies on which server you want to initiate the TLS handshake, allowing the server to present one of multiple possible certificates on the same IP address and TCP port number.
	// For SSL tests, it specifies on which server you want to initiate the TLS handshake, allowing the server to present one of multiple possible certificates on the same IP address and TCP port number.
	// +kubebuilder:validation:Optional
	Servername *string `json:"servername,omitempty" tf:"servername,omitempty"`

	// (String) The gRPC service on which you want to perform the gRPC call.
	// The gRPC service on which you want to perform the gRPC call.
	// +kubebuilder:validation:Optional
	Service *string `json:"service,omitempty" tf:"service,omitempty"`

	// (Boolean) This will turn on a traceroute probe to discover all gateways along the path to the host destination. For ICMP tests (subtype = "icmp").
	// This will turn on a traceroute probe to discover all gateways along the path to the host destination. For ICMP tests (`subtype = "icmp"`).
	// +kubebuilder:validation:Optional
	ShouldTrackHops *bool `json:"shouldTrackHops,omitempty" tf:"should_track_hops,omitempty"`

	// (Number) Timeout in seconds for the test. Defaults to 60.
	// Timeout in seconds for the test. Defaults to `60`.
	// +kubebuilder:validation:Optional
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// (String) The URL to send the request to.
	// The URL to send the request to.
	// +kubebuilder:validation:Optional
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type TestRequestProxyInitParameters struct {

	// (Map of String) Header name and value map.
	// Header name and value map.
	// +mapType=granular
	Headers map[string]*string `json:"headers,omitempty" tf:"headers,omitempty"`

	// (String) The URL to send the request to.
	// URL of the proxy to perform the test.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type TestRequestProxyObservation struct {

	// (Map of String) Header name and value map.
	// Header name and value map.
	// +mapType=granular
	Headers map[string]*string `json:"headers,omitempty" tf:"headers,omitempty"`

	// (String) The URL to send the request to.
	// URL of the proxy to perform the test.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type TestRequestProxyParameters struct {

	// (Map of String) Header name and value map.
	// Header name and value map.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Headers map[string]*string `json:"headers,omitempty" tf:"headers,omitempty"`

	// (String) The URL to send the request to.
	// URL of the proxy to perform the test.
	// +kubebuilder:validation:Optional
	URL *string `json:"url" tf:"url,omitempty"`
}

type TimeframesInitParameters struct {

	// (Number) Number representing the day of the week
	// Number representing the day of the week
	Day *float64 `json:"day,omitempty" tf:"day,omitempty"`

	// (String) The hour of the day on which scheduling starts.
	// The hour of the day on which scheduling starts.
	From *string `json:"from,omitempty" tf:"from,omitempty"`

	// (String) The hour of the day on which scheduling ends.
	// The hour of the day on which scheduling ends.
	To *string `json:"to,omitempty" tf:"to,omitempty"`
}

type TimeframesObservation struct {

	// (Number) Number representing the day of the week
	// Number representing the day of the week
	Day *float64 `json:"day,omitempty" tf:"day,omitempty"`

	// (String) The hour of the day on which scheduling starts.
	// The hour of the day on which scheduling starts.
	From *string `json:"from,omitempty" tf:"from,omitempty"`

	// (String) The hour of the day on which scheduling ends.
	// The hour of the day on which scheduling ends.
	To *string `json:"to,omitempty" tf:"to,omitempty"`
}

type TimeframesParameters struct {

	// (Number) Number representing the day of the week
	// Number representing the day of the week
	// +kubebuilder:validation:Optional
	Day *float64 `json:"day" tf:"day,omitempty"`

	// (String) The hour of the day on which scheduling starts.
	// The hour of the day on which scheduling starts.
	// +kubebuilder:validation:Optional
	From *string `json:"from" tf:"from,omitempty"`

	// (String) The hour of the day on which scheduling ends.
	// The hour of the day on which scheduling ends.
	// +kubebuilder:validation:Optional
	To *string `json:"to" tf:"to,omitempty"`
}

type ValueInitParameters struct {

	// (String) Synthetics test type. Valid values are api, browser.
	// Defaults to `"css"`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) Regex or JSON path used for the parser. Not used with type raw.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ValueObservation struct {

	// (String) Synthetics test type. Valid values are api, browser.
	// Defaults to `"css"`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) Regex or JSON path used for the parser. Not used with type raw.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ValueParameters struct {

	// (String) Synthetics test type. Valid values are api, browser.
	// Defaults to `"css"`.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) Regex or JSON path used for the parser. Not used with type raw.
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type VariableInitParameters struct {

	// (String) Example of the extracted variable. Defaults to "".
	// Example of the extracted variable. Defaults to `""`.
	Example *string `json:"example,omitempty" tf:"example,omitempty"`

	// (String) Name of Datadog synthetics test.
	// Name of the extracted variable.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type VariableObservation struct {

	// (String) Example of the extracted variable. Defaults to "".
	// Example of the extracted variable. Defaults to `""`.
	Example *string `json:"example,omitempty" tf:"example,omitempty"`

	// (String) Name of Datadog synthetics test.
	// Name of the extracted variable.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type VariableParameters struct {

	// (String) Example of the extracted variable. Defaults to "".
	// Example of the extracted variable. Defaults to `""`.
	// +kubebuilder:validation:Optional
	Example *string `json:"example,omitempty" tf:"example,omitempty"`

	// (String) Name of Datadog synthetics test.
	// Name of the extracted variable.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

// TestSpec defines the desired state of Test
type TestSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TestParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider TestInitParameters `json:"initProvider,omitempty"`
}

// TestStatus defines the observed state of Test.
type TestStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TestObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Test is the Schema for the Tests API. Provides a Datadog synthetics test resource. This can be used to create and manage Datadog synthetics test.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,datadog}
type Test struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.locations) || (has(self.initProvider) && has(self.initProvider.locations))",message="spec.forProvider.locations is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.status) || (has(self.initProvider) && has(self.initProvider.status))",message="spec.forProvider.status is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	Spec   TestSpec   `json:"spec"`
	Status TestStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TestList contains a list of Tests
type TestList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Test `json:"items"`
}

// Repository type metadata.
var (
	Test_Kind             = "Test"
	Test_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Test_Kind}.String()
	Test_KindAPIVersion   = Test_Kind + "." + CRDGroupVersion.String()
	Test_GroupVersionKind = CRDGroupVersion.WithKind(Test_Kind)
)

func init() {
	SchemeBuilder.Register(&Test{}, &TestList{})
}
